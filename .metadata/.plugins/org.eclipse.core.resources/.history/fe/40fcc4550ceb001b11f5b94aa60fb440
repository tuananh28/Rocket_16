package com.vti.backend;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import com.vti.entity.Department;

import ultis.jdbcUltis;

public class DepartmentDAO {
	private jdbcUltis jdbc;

	public DepartmentDAO() throws SQLException, FileNotFoundException, IOException {
		jdbc = new jdbcUltis();
	}

	public List<Department> getDepartments()
			throws FileNotFoundException, ClassNotFoundException, SQLException, IOException {
		// Tạo method để lấy ra danh sách tất cả các Department

			List<Department> departments = new ArrayList<>();

			// Step 2: get connection
			Connection connection = jdbc.getConnection();

			// Step 3: Create a statement object
			Statement statement = connection.createStatement();

			// Step 4: execute query
			String sql = "SELECT * FROM Department";
			ResultSet resultSet = statement.executeQuery(sql);

			// Step 5: handling result set
			while (resultSet.next()) {
				Department department = new Department();
				department.setId(resultSet.getInt("DepartmentId"));
				department.setName(resultSet.getString("DepartmentName"));

				departments.add(department);
			}

			// disconnect
			jdbc.disConnection();

			return departments;
		}
	public Department getDepartmentByID(int id) throws Exception {

		// get connection
		Connection connection = jdbc.getConnection();

		// Create a statement object
		String sql = "SELECT * FROM Department WHERE DepartmentId = ?";
		PreparedStatement preparedStatement = connection.prepareStatement(sql);

		// set parameter
		preparedStatement.setInt(1, id);

		// Step 4: execute query
		ResultSet resultSet = preparedStatement.executeQuery();

		// Step 5: handling result set
		if (resultSet.next()) {
			Department department = new Department();
			department.setId(resultSet.getInt("DepartmentId"));
			department.setName(resultSet.getString("DepartmentName"));

			jdbc.disConnection();
			return department;

		} else {
			jdbc.disConnection();
			System.out.println("Lỗi !!!");
		}
		return null;
	}


	public boolean isDepartmentNameExists(String name) throws SQLException, IOException, ClassNotFoundException {

		// get connection
		Connection connection = jdbcUtils.connect();

		// Create a statement object
		String sql = "SELECT 1 FROM Department WHERE DepartmentName = ?";
		PreparedStatement preparedStatement = connection.prepareStatement(sql);

		// set parameter
		preparedStatement.setString(1, name);

		// Step 4: execute query
		ResultSet resultSet = preparedStatement.executeQuery();

		// Step 5: handling result set
		if (resultSet.next()) {
			jdbcUtils.disconnect();
			return true;

		} else {
			jdbcUtils.disconnect();
			return false;
		}
	}

	public boolean CreateDep(String name) throws SQLException, ClassNotFoundException {
		// Tạo method để người dùng có thể tạo được department
		String sql = "INSERT INTO `Department` (DeparmentName) VALUES ?";
		PreparedStatement preparedStatement = jdbc.createPrepareStatement(sql);
		preparedStatement.setNString(1, name);
		int result = preparedStatement.executeUpdate();
		if (result == 1) {
			System.out.println("Tạo phòng thành công");
			jdbc.disConnection();
			return true;
		} else {
			System.out.println("Xảy ra lỗi !!");
			jdbc.disConnection();
			return false;
		}
	}

	public boolean updateDep(int id, String newName) throws Exception {
		// Tạo method để người dùng có thể update được department name
		Department department = getDepByID(id);
		if (department == null) {
			return false;
		} else {

			String sql = "UPDATE `Department` SET DepartmentName = ? WHERE id = ? ";
			PreparedStatement preparedStatement = jdbc.createPrepareStatement(sql);
			preparedStatement.setInt(1, id);
			preparedStatement.setNString(2, newName);
			int result = preparedStatement.executeUpdate();
			if (result == 1) {
				System.out.println("Update thành công");
				jdbc.disConnection();
				return true;
			} else {
				System.out.println("không thể Update");
				jdbc.disConnection();
				return false;
			}
		}
	}
}

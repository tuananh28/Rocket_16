{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Rocket_16\\\\ReactJS\\\\Final_Demo\\\\Frontend\\\\Group_Management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\Rocket_16\\\\ReactJS\\\\Final_Demo\\\\Frontend\\\\Group_Management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"D:\\\\Rocket_16\\\\ReactJS\\\\Final_Demo\\\\Frontend\\\\Group_Management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Rocket_16\\\\ReactJS\\\\Final_Demo\\\\Frontend\\\\Group_Management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Rocket_16\\\\ReactJS\\\\Final_Demo\\\\Frontend\\\\Group_Management\\\\src\\\\pages\\\\group\\\\Group.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Card, CardBody, Col, Container, Row, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport filterFactory, { customFilter } from 'react-bootstrap-table2-filter';\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport { selectGroups, selectPage, selectSelectedRows, selectSize, selectTotalSize } from \"../../redux/selectors/GroupSelector\";\nimport { connect } from \"react-redux\";\nimport { getListGroupAction, updateSelectedRowsAction } from '../../redux/actions/GroupActions';\nimport GroupApi from '../../api/GroupApi';\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\nimport CustomSearch from \"./CustomSearch\";\nimport * as Icon from 'react-feather';\nimport CustomFilter from \"./CustomFilter\";\nimport { FastField, Form, Formik } from \"formik\";\nimport { ReactstrapInput } from \"reactstrap-formik\";\nimport * as Yup from 'yup';\nimport { toastr } from \"react-redux-toastr\";\n\nvar Group = function Group(props) {\n  var getListGroup = props.getListGroupAction;\n  var size = props.size;\n  var onTotalMemberFilter;\n  useEffect(function () {\n    var getAllGroup = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result, groups, totalSize;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return GroupApi.getAll(1, size);\n\n              case 2:\n                result = _context.sent;\n                groups = result.content;\n                totalSize = result.totalElements;\n                getListGroup(groups, 1, totalSize);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getAllGroup() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getAllGroup();\n  }, [getListGroup, size]);\n\n  var actionFormatter = function actionFormatter(cell, row, rowIndex) {\n    return /*#__PURE__*/React.createElement(Icon.Edit2, {\n      size: 16,\n      className: \"align-middle mr-2\",\n      onClick: function onClick() {\n        return updateGroup(row.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var tableColumns = [{\n    dataField: \"name\",\n    text: \"Name\",\n    sort: true\n  }, {\n    dataField: \"totalMember\",\n    text: \"Total Member\",\n    sort: true,\n    filter: customFilter(),\n    filterRenderer: function filterRenderer(onFilter, column) {\n      onTotalMemberFilter = onFilter;\n      return null;\n    }\n  }, {\n    dataField: \"action\",\n    text: \"\",\n    formatter: actionFormatter,\n    headerStyle: function headerStyle(colum, colIndex) {\n      return {\n        width: '80px'\n      };\n    },\n    align: function align() {\n      return 'center';\n    }\n  }];\n\n  var handleTableChange = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(type, _ref2) {\n      var page, sortField, sortOrder, searchText, filters, filter, minTotalMember, maxTotalMember, result, groups, totalSize;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              page = _ref2.page, sortField = _ref2.sortField, sortOrder = _ref2.sortOrder, searchText = _ref2.searchText, filters = _ref2.filters;\n\n              // sort\n              if (sortField === null || sortField === undefined || sortOrder === null || sortOrder === undefined) {\n                sortField = 'id';\n                sortOrder = 'desc';\n              } // filter\n\n\n              filter = filters && filters.totalMember && filters.totalMember.filterVal ? filters.totalMember.filterVal : null;\n              minTotalMember = filter && filter.minTotalMember ? filter.minTotalMember : null;\n              maxTotalMember = filter && filter.maxTotalMember ? filter.maxTotalMember : null;\n              _context2.next = 7;\n              return GroupApi.getAll(page, size, sortField, sortOrder, searchText, minTotalMember, maxTotalMember);\n\n            case 7:\n              result = _context2.sent;\n              groups = result.content;\n              totalSize = result.totalElements;\n              getListGroup(groups, page, totalSize, minTotalMember, maxTotalMember, searchText);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleTableChange(_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(); // filter\n\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVisiableFilter = _useState2[0],\n      setVisiableFilter = _useState2[1];\n\n  var handleChangeFilter = function handleChangeFilter(minTotalMember, maxTotalMember) {\n    onTotalMemberFilter({\n      minTotalMember: minTotalMember,\n      maxTotalMember: maxTotalMember\n    });\n  }; // refresh form\n\n\n  var refreshForm = function refreshForm() {\n    // refresh selected rows\n    props.updateSelectedRowsAction([]);\n    handleTableChange(null, {\n      page: 1,\n      sortField: null,\n      sortOrder: null,\n      searchText: null,\n      filters: null\n    });\n  }; // create\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isOpenModalCreate = _useState4[0],\n      setOpenModalCreate = _useState4[1];\n\n  var showSuccessNotification = function showSuccessNotification(title, message) {\n    var options = {\n      timeOut: 3000,\n      showCloseButton: false,\n      progressBar: false,\n      position: \"top-right\"\n    }; // show notification\n\n    toastr.success(title, message, options);\n  };\n\n  var showErrorNotification = function showErrorNotification(title, message) {\n    var options = {\n      timeOut: 3000,\n      showCloseButton: false,\n      progressBar: false,\n      position: \"top-right\"\n    }; // show notification\n\n    toastr.error(title, message, options);\n  }; // update group\n\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      groupUpdateInfo = _useState6[0],\n      setGroupUpdateInfo = _useState6[1];\n\n  var updateGroup = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(groupId) {\n      var groupInfo;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setOpenModalUpdate(true);\n              _context3.next = 3;\n              return GroupApi.getById(groupId);\n\n            case 3:\n              groupInfo = _context3.sent;\n              setGroupUpdateInfo(groupInfo);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function updateGroup(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isOpenModalUpdate = _useState8[0],\n      setOpenModalUpdate = _useState8[1]; // delete\n\n\n  var handleOnSelect = function handleOnSelect(row, isSelect) {\n    var selected = props.selectedRows;\n\n    if (isSelect) {\n      selected = [].concat(_toConsumableArray(props.selectedRows), [row.id]);\n    } else {\n      selected = props.selectedRows.filter(function (x) {\n        return x !== row.id;\n      });\n    }\n\n    props.updateSelectedRowsAction(selected);\n  };\n\n  var handleOnSelectAll = function handleOnSelectAll(isSelect, rows) {\n    var selected = props.selectedRows;\n    var ids = rows.map(function (r) {\n      return r.id;\n    });\n\n    if (isSelect) {\n      selected = ids;\n    } else {\n      selected = [];\n    }\n\n    props.updateSelectedRowsAction(selected);\n  };\n\n  var deleteGroup = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(props.selectedRows.length !== 0)) {\n                _context4.next = 14;\n                break;\n              }\n\n              _context4.prev = 1;\n              _context4.next = 4;\n              return GroupApi.deleteByIds(props.selectedRows);\n\n            case 4:\n              showSuccessNotification(\"Delete Group\", \"Delete Group Successfully!\");\n              refreshForm();\n              _context4.next = 12;\n              break;\n\n            case 8:\n              _context4.prev = 8;\n              _context4.t0 = _context4[\"catch\"](1);\n              console.log(_context4.t0); // redirect page error server\n\n              props.history.push(\"/auth/500\");\n\n            case 12:\n              _context4.next = 15;\n              break;\n\n            case 14:\n              showErrorNotification(\"Delete Group\", \"You must select groups\");\n\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[1, 8]]);\n    }));\n\n    return function deleteGroup() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    className: \"p-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"h3 mb-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, \"Group Management\"), /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ToolkitProvider, {\n    keyField: \"id\",\n    data: props.groups,\n    columns: tableColumns,\n    search: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }, function (toolkitprops) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, isVisiableFilter && /*#__PURE__*/React.createElement(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: \"12\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(CustomFilter, {\n      handleChangeFilter: handleChangeFilter,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        alignItems: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: \"3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomSearch, Object.assign({}, toolkitprops.searchProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 27\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      lg: \"9\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"float-right pull-right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Icon.Filter, {\n      size: 24,\n      className: \"align-middle mr-2\",\n      onClick: function onClick() {\n        return setVisiableFilter(!isVisiableFilter);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Icon.RefreshCcw, {\n      className: \"align-middle mr-2\",\n      size: 24,\n      onClick: refreshForm,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Icon.PlusCircle, {\n      className: \"align-middle mr-2\",\n      size: 24,\n      onClick: function onClick() {\n        return setOpenModalCreate(true);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Icon.Trash2, {\n      className: \"align-middle mr-2\",\n      size: 24,\n      onClick: deleteGroup,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(BootstrapTable, Object.assign({}, toolkitprops.baseProps, {\n      bootstrap4: true,\n      striped: true,\n      hover: true,\n      bordered: true,\n      remote: true,\n      pagination: paginationFactory({\n        page: props.page,\n        sizePerPage: props.size,\n        totalSize: props.totalSize,\n        withFirstAndLast: false,\n        alwaysShowAllBtns: true,\n        hideSizePerPage: true\n      }),\n      filter: filterFactory(),\n      selectRow: {\n        mode: 'checkbox',\n        clickToSelect: true,\n        selected: props.selectedRows,\n        onSelect: handleOnSelect,\n        onSelectAll: handleOnSelectAll\n      },\n      onTableChange: handleTableChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 23\n      }\n    })));\n  }))))), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpenModalCreate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      name: ''\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().min(6, 'Must be between 6 and 50 characters').max(50, 'Must be between 6 and 50 characters').required('Required').test('checkUniqueName', 'This name is already registered.', /*#__PURE__*/function () {\n        var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(name) {\n          var isExists;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return GroupApi.existsByName(name);\n\n                case 2:\n                  isExists = _context5.sent;\n                  return _context5.abrupt(\"return\", !isExists);\n\n                case 4:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x4) {\n          return _ref6.apply(this, arguments);\n        };\n      }())\n    }),\n    onSubmit: /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(values) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return GroupApi.create(values.name);\n\n              case 3:\n                // show notification\n                showSuccessNotification(\"Create Group\", \"Create Group Successfully!\"); // close modal\n\n                setOpenModalCreate(false); // Refresh table\n\n                refreshForm();\n                _context6.next = 13;\n                break;\n\n              case 8:\n                _context6.prev = 8;\n                _context6.t0 = _context6[\"catch\"](0);\n                console.log(_context6.t0);\n                setOpenModalCreate(false); // redirect page error server\n\n                props.history.push(\"/auth/500\");\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[0, 8]]);\n      }));\n\n      return function (_x5) {\n        return _ref7.apply(this, arguments);\n      };\n    }(),\n    validateOnChange: false,\n    validateOnBlur: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }\n  }, function (_ref8) {\n    var isSubmitting = _ref8.isSubmitting;\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 15\n      }\n    }, \"Create Group\"), /*#__PURE__*/React.createElement(ModalBody, {\n      className: \"m-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        alignItems: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: \"auto\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 21\n      }\n    }, \"Group Name:\")), /*#__PURE__*/React.createElement(Col, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      type: \"text\",\n      bsSize: \"lg\",\n      name: \"name\",\n      placeholder: \"Enter group name\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }\n    }, \"Save\"), \" \", /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: function onClick() {\n        return setOpenModalCreate(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }\n    }, \"Close\")));\n  })), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpenModalUpdate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: {\n      name: groupUpdateInfo && groupUpdateInfo.name ? groupUpdateInfo.name : '',\n      totalMember: groupUpdateInfo && groupUpdateInfo.totalMember !== undefined && groupUpdateInfo.totalMember !== null ? groupUpdateInfo.totalMember : ''\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().min(6, 'Must be between 6 and 50 characters').max(50, 'Must be between 6 and 50 characters').required('Required').test('checkUniqueName', 'This name is already registered.', /*#__PURE__*/function () {\n        var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(name) {\n          var isExists;\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  if (!(name === groupUpdateInfo.name)) {\n                    _context7.next = 2;\n                    break;\n                  }\n\n                  return _context7.abrupt(\"return\", true);\n\n                case 2:\n                  _context7.next = 4;\n                  return GroupApi.existsByName(name);\n\n                case 4:\n                  isExists = _context7.sent;\n                  return _context7.abrupt(\"return\", !isExists);\n\n                case 6:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }));\n\n        return function (_x6) {\n          return _ref9.apply(this, arguments);\n        };\n      }()),\n      totalMember: Yup.number().min(0, 'Must be greater than or equal 0 and integer').integer('Must be greater than or equal 0 and integer')\n    }),\n    onSubmit: /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(values) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return GroupApi.update(groupUpdateInfo.id, values.name, values.totalMember);\n\n              case 3:\n                // show notification\n                showSuccessNotification(\"Update Group\", \"Update Group Successfully!\"); // close modal\n\n                setOpenModalUpdate(false); // Refresh table\n\n                refreshForm();\n                _context8.next = 13;\n                break;\n\n              case 8:\n                _context8.prev = 8;\n                _context8.t0 = _context8[\"catch\"](0);\n                console.log(_context8.t0);\n                setOpenModalUpdate(false); // redirect page error server\n\n                props.history.push(\"/auth/500\");\n\n              case 13:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[0, 8]]);\n      }));\n\n      return function (_x7) {\n        return _ref10.apply(this, arguments);\n      };\n    }(),\n    validateOnChange: false,\n    validateOnBlur: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 9\n    }\n  }, function (_ref11) {\n    var isSubmitting = _ref11.isSubmitting;\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 15\n      }\n    }, \"Update Group\"), /*#__PURE__*/React.createElement(ModalBody, {\n      className: \"m-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      style: {\n        alignItems: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: \"auto\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 21\n      }\n    }, \"Group Name:\")), /*#__PURE__*/React.createElement(Col, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      type: \"text\",\n      bsSize: \"lg\",\n      name: \"name\",\n      placeholder: \"Enter group name\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      style: {\n        alignItems: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: \"auto\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 21\n      }\n    }, \"Total Member:\")), /*#__PURE__*/React.createElement(Col, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FastField, {\n      type: \"number\",\n      bsSize: \"lg\",\n      name: \"totalMember\",\n      placeholder: \"Enter total member\",\n      component: ReactstrapInput,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 17\n      }\n    }, \"Save\"), \" \", /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: function onClick() {\n        return setOpenModalUpdate(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 17\n      }\n    }, \"Close\")));\n  })));\n};\n\nvar mapGlobalStateToProps = function mapGlobalStateToProps(state) {\n  return {\n    groups: selectGroups(state),\n    page: selectPage(state),\n    size: selectSize(state),\n    totalSize: selectTotalSize(state),\n    selectedRows: selectSelectedRows(state)\n  };\n};\n\nexport default connect(mapGlobalStateToProps, {\n  getListGroupAction: getListGroupAction,\n  updateSelectedRowsAction: updateSelectedRowsAction\n})(Group);","map":{"version":3,"sources":["D:/Rocket_16/ReactJS/Final_Demo/Frontend/Group_Management/src/pages/group/Group.js"],"names":["React","useEffect","useState","Button","Card","CardBody","Col","Container","Row","Modal","ModalBody","ModalFooter","ModalHeader","filterFactory","customFilter","BootstrapTable","paginationFactory","selectGroups","selectPage","selectSelectedRows","selectSize","selectTotalSize","connect","getListGroupAction","updateSelectedRowsAction","GroupApi","ToolkitProvider","CustomSearch","Icon","CustomFilter","FastField","Form","Formik","ReactstrapInput","Yup","toastr","Group","props","getListGroup","size","onTotalMemberFilter","getAllGroup","getAll","result","groups","content","totalSize","totalElements","actionFormatter","cell","row","rowIndex","updateGroup","id","tableColumns","dataField","text","sort","filter","filterRenderer","onFilter","column","formatter","headerStyle","colum","colIndex","width","align","handleTableChange","type","page","sortField","sortOrder","searchText","filters","undefined","totalMember","filterVal","minTotalMember","maxTotalMember","isVisiableFilter","setVisiableFilter","handleChangeFilter","refreshForm","isOpenModalCreate","setOpenModalCreate","showSuccessNotification","title","message","options","timeOut","showCloseButton","progressBar","position","success","showErrorNotification","error","groupUpdateInfo","setGroupUpdateInfo","groupId","setOpenModalUpdate","getById","groupInfo","isOpenModalUpdate","handleOnSelect","isSelect","selected","selectedRows","x","handleOnSelectAll","rows","ids","map","r","deleteGroup","length","deleteByIds","console","log","history","push","toolkitprops","alignItems","searchProps","baseProps","sizePerPage","withFirstAndLast","alwaysShowAllBtns","hideSizePerPage","mode","clickToSelect","onSelect","onSelectAll","name","object","string","min","max","required","test","existsByName","isExists","values","create","isSubmitting","number","integer","update","mapGlobalStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from \"reactstrap\";\r\nimport filterFactory, { customFilter } from 'react-bootstrap-table2-filter';\r\n\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport { selectGroups, selectPage, selectSelectedRows, selectSize, selectTotalSize } from \"../../redux/selectors/GroupSelector\";\r\nimport { connect } from \"react-redux\";\r\nimport { getListGroupAction, updateSelectedRowsAction } from '../../redux/actions/GroupActions';\r\nimport GroupApi from '../../api/GroupApi';\r\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\r\nimport CustomSearch from \"./CustomSearch\";\r\nimport * as Icon from 'react-feather';\r\nimport CustomFilter from \"./CustomFilter\";\r\nimport { FastField, Form, Formik } from \"formik\";\r\nimport { ReactstrapInput } from \"reactstrap-formik\";\r\nimport * as Yup from 'yup';\r\nimport { toastr } from \"react-redux-toastr\";\r\n\r\nconst Group = (props) => {\r\n\r\n  const getListGroup = props.getListGroupAction;\r\n  const size = props.size;\r\n  let onTotalMemberFilter;\r\n\r\n  useEffect(() => {\r\n    const getAllGroup = async () => {\r\n      const result = await GroupApi.getAll(1, size);\r\n      const groups = result.content;\r\n      const totalSize = result.totalElements;\r\n      getListGroup(groups, 1, totalSize);\r\n    }\r\n    getAllGroup();\r\n  }, [getListGroup, size]);\r\n\r\n  const actionFormatter = (cell, row, rowIndex) => {\r\n\r\n    return (\r\n      <Icon.Edit2 size={16} className=\"align-middle mr-2\" onClick={() => updateGroup(row.id)} />\r\n    );\r\n  };\r\n\r\n  const tableColumns = [\r\n    {\r\n      dataField: \"name\",\r\n      text: \"Name\",\r\n      sort: true\r\n    },\r\n    {\r\n      dataField: \"totalMember\",\r\n      text: \"Total Member\",\r\n      sort: true,\r\n      filter: customFilter(),\r\n      filterRenderer: (onFilter, column) => {\r\n        onTotalMemberFilter = onFilter;\r\n        return null;\r\n      },\r\n    },\r\n    {\r\n      dataField: \"action\",\r\n      text: \"\",\r\n      formatter: actionFormatter,\r\n      headerStyle: (colum, colIndex) => {\r\n        return { width: '80px' };\r\n      },\r\n      align: () => {\r\n        return 'center';\r\n      },\r\n    }\r\n  ];\r\n\r\n  const handleTableChange = async (type, { page, sortField, sortOrder, searchText, filters }) => {\r\n    // sort\r\n    if (sortField === null || sortField === undefined || sortOrder === null || sortOrder === undefined) {\r\n      sortField = 'id'\r\n      sortOrder = 'desc';\r\n    }\r\n\r\n    // filter\r\n    const filter = filters && filters.totalMember && filters.totalMember.filterVal ? filters.totalMember.filterVal : null;\r\n    const minTotalMember = filter && filter.minTotalMember ? filter.minTotalMember : null;\r\n    const maxTotalMember = filter && filter.maxTotalMember ? filter.maxTotalMember : null;\r\n\r\n    const result = await GroupApi.getAll(page, size, sortField, sortOrder, searchText, minTotalMember, maxTotalMember);\r\n    const groups = result.content;\r\n    const totalSize = result.totalElements;\r\n    getListGroup(groups, page, totalSize, minTotalMember, maxTotalMember, searchText);\r\n  }\r\n\r\n  // filter\r\n  const [isVisiableFilter, setVisiableFilter] = useState(false);\r\n\r\n  const handleChangeFilter = (minTotalMember, maxTotalMember) => {\r\n    onTotalMemberFilter({\r\n      minTotalMember,\r\n      maxTotalMember\r\n    });\r\n  }\r\n\r\n  // refresh form\r\n  const refreshForm = () => {\r\n    // refresh selected rows\r\n    props.updateSelectedRowsAction([]);\r\n\r\n    handleTableChange(null,\r\n      {\r\n        page: 1,\r\n        sortField: null,\r\n        sortOrder: null,\r\n        searchText: null,\r\n        filters: null\r\n      }\r\n    );\r\n  }\r\n\r\n  // create\r\n  const [isOpenModalCreate, setOpenModalCreate] = useState(false);\r\n\r\n  const showSuccessNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 3000,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.success(title, message, options);\r\n  }\r\n\r\n  const showErrorNotification = (title, message) => {\r\n    const options = {\r\n      timeOut: 3000,\r\n      showCloseButton: false,\r\n      progressBar: false,\r\n      position: \"top-right\"\r\n    };\r\n\r\n    // show notification\r\n    toastr.error(title, message, options);\r\n  }\r\n  // update group\r\n  const [groupUpdateInfo, setGroupUpdateInfo] = useState();\r\n\r\n  const updateGroup = async (groupId) => {\r\n    setOpenModalUpdate(true);\r\n    const groupInfo = await GroupApi.getById(groupId);\r\n    setGroupUpdateInfo(groupInfo);\r\n  }\r\n\r\n  const [isOpenModalUpdate, setOpenModalUpdate] = useState(false);\r\n\r\n  // delete\r\n  const handleOnSelect = (row, isSelect) => {\r\n\r\n    let selected = props.selectedRows;\r\n\r\n    if (isSelect) {\r\n      selected = [...props.selectedRows, row.id]\r\n    } else {\r\n      selected = props.selectedRows.filter(x => x !== row.id)\r\n    }\r\n\r\n    props.updateSelectedRowsAction(selected);\r\n  }\r\n\r\n  const handleOnSelectAll = (isSelect, rows) => {\r\n\r\n    let selected = props.selectedRows;\r\n\r\n    const ids = rows.map(r => r.id);\r\n    if (isSelect) {\r\n      selected = ids\r\n    } else {\r\n      selected = []\r\n    }\r\n\r\n    props.updateSelectedRowsAction(selected);\r\n  }\r\n\r\n  const deleteGroup = async () => {\r\n    if (props.selectedRows.length !== 0) {\r\n      try {\r\n        await GroupApi.deleteByIds(props.selectedRows);\r\n        showSuccessNotification(\r\n          \"Delete Group\",\r\n          \"Delete Group Successfully!\");\r\n        refreshForm();\r\n      } catch (error) {\r\n        console.log(error);\r\n        // redirect page error server\r\n        props.history.push(\"/auth/500\");\r\n      }\r\n    } else {\r\n      showErrorNotification(\r\n        \"Delete Group\",\r\n        \"You must select groups\"\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">Group Management</h1>\r\n      <Row>\r\n        <Col>\r\n          <Card>\r\n            <CardBody>\r\n              <ToolkitProvider\r\n                keyField=\"id\"\r\n                data={props.groups}\r\n                columns={tableColumns}\r\n                search\r\n              >\r\n                {\r\n                  toolkitprops => (\r\n                    <>\r\n                      {/* Filter */}\r\n                      {isVisiableFilter &&\r\n                        <Row>\r\n                          <Col lg=\"12\">\r\n                            <CustomFilter handleChangeFilter={handleChangeFilter} />\r\n                          </Col>\r\n                        </Row>\r\n                      }\r\n                      {/* Search */}\r\n                      <Row style={{ alignItems: \"center\" }}>\r\n                        <Col lg=\"3\">\r\n                          <CustomSearch {...toolkitprops.searchProps} />\r\n                        </Col>\r\n                        <Col lg=\"9\">\r\n                          <div className=\"float-right pull-right\">\r\n                            <Icon.Filter size={24} className=\"align-middle mr-2\" onClick={() => setVisiableFilter(!isVisiableFilter)} />\r\n                            <Icon.RefreshCcw className=\"align-middle mr-2\" size={24} onClick={refreshForm} />\r\n                            <Icon.PlusCircle className=\"align-middle mr-2\" size={24} onClick={() => setOpenModalCreate(true)} />\r\n                            <Icon.Trash2 className=\"align-middle mr-2\" size={24} onClick={deleteGroup} />\r\n                          </div>\r\n                        </Col>\r\n                      </Row>\r\n                      <BootstrapTable\r\n                        {...toolkitprops.baseProps}\r\n                        bootstrap4\r\n                        striped\r\n                        hover\r\n                        bordered\r\n                        remote\r\n                        pagination={paginationFactory({\r\n                          page: props.page,\r\n                          sizePerPage: props.size,\r\n                          totalSize: props.totalSize,\r\n\r\n                          withFirstAndLast: false,\r\n                          alwaysShowAllBtns: true,\r\n\r\n                          hideSizePerPage: true,\r\n                        })}\r\n                        filter={filterFactory()}\r\n                        selectRow={{\r\n                          mode: 'checkbox',\r\n                          clickToSelect: true,\r\n                          selected: props.selectedRows,\r\n                          onSelect: handleOnSelect,\r\n                          onSelectAll: handleOnSelectAll\r\n                        }}\r\n                        onTableChange={handleTableChange}\r\n                      />\r\n                    </>\r\n                  )\r\n                }\r\n              </ToolkitProvider>\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Modal isOpen={isOpenModalCreate}>\r\n        <Formik\r\n          initialValues={\r\n            {\r\n              name: ''\r\n            }\r\n          }\r\n          validationSchema={\r\n            Yup.object({\r\n              name: Yup.string()\r\n                .min(6, 'Must be between 6 and 50 characters')\r\n                .max(50, 'Must be between 6 and 50 characters')\r\n                .required('Required')\r\n                .test('checkUniqueName', 'This name is already registered.', async name => {\r\n                  // call api\r\n                  const isExists = await GroupApi.existsByName(name);\r\n                  return !isExists;\r\n                }),\r\n            })\r\n          }\r\n\r\n          onSubmit={\r\n            async values => {\r\n              try {\r\n                await GroupApi.create(values.name);\r\n                // show notification\r\n                showSuccessNotification(\r\n                  \"Create Group\",\r\n                  \"Create Group Successfully!\"\r\n                );\r\n                // close modal\r\n                setOpenModalCreate(false);\r\n                // Refresh table\r\n                refreshForm();\r\n              } catch (error) {\r\n                console.log(error);\r\n                setOpenModalCreate(false);\r\n                // redirect page error server\r\n                props.history.push(\"/auth/500\");\r\n              }\r\n            }\r\n          }\r\n\r\n          validateOnChange={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              {/* header */}\r\n              <ModalHeader>Create Group</ModalHeader>\r\n\r\n              {/* body */}\r\n              <ModalBody className=\"m-3\">\r\n\r\n                <Row style={{ alignItems: \"center\" }}>\r\n                  <Col lg=\"auto\">\r\n                    <label>Group Name:</label>\r\n                  </Col>\r\n                  <Col>\r\n                    <FastField\r\n                      type=\"text\"\r\n                      bsSize=\"lg\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter group name\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n\r\n              </ModalBody>\r\n\r\n              {/* footer */}\r\n              <ModalFooter>\r\n                <Button type=\"submit\" color=\"primary\" disabled={isSubmitting}>\r\n                  Save\r\n                </Button>{\" \"}\r\n\r\n                <Button color=\"primary\" onClick={() => setOpenModalCreate(false)}>\r\n                  Close\r\n                </Button>\r\n              </ModalFooter>\r\n            </Form>\r\n          )}\r\n        </Formik >\r\n      </Modal>\r\n\r\n      <Modal isOpen={isOpenModalUpdate}>\r\n        <Formik\r\n          enableReinitialize\r\n          initialValues={\r\n            {\r\n              name: groupUpdateInfo && groupUpdateInfo.name ? groupUpdateInfo.name : '',\r\n              totalMember: groupUpdateInfo && groupUpdateInfo.totalMember !== undefined && groupUpdateInfo.totalMember !== null ? groupUpdateInfo.totalMember : ''\r\n            }\r\n          }\r\n          validationSchema={\r\n            Yup.object({\r\n              name: Yup.string()\r\n                .min(6, 'Must be between 6 and 50 characters')\r\n                .max(50, 'Must be between 6 and 50 characters')\r\n                .required('Required')\r\n                .test('checkUniqueName', 'This name is already registered.', async name => {\r\n                  if (name === groupUpdateInfo.name) {\r\n                    return true;\r\n                  }\r\n                  // call api\r\n                  const isExists = await GroupApi.existsByName(name);\r\n                  return !isExists;\r\n                }),\r\n\r\n              totalMember: Yup.number()\r\n                .min(0, 'Must be greater than or equal 0 and integer')\r\n                .integer('Must be greater than or equal 0 and integer')\r\n            })\r\n          }\r\n\r\n          onSubmit={\r\n            async values => {\r\n              try {\r\n                await GroupApi.update(\r\n                  groupUpdateInfo.id,\r\n                  values.name,\r\n                  values.totalMember\r\n                );\r\n                // show notification\r\n                showSuccessNotification(\r\n                  \"Update Group\",\r\n                  \"Update Group Successfully!\"\r\n                );\r\n                // close modal\r\n                setOpenModalUpdate(false);\r\n                // Refresh table\r\n                refreshForm();\r\n              } catch (error) {\r\n                console.log(error);\r\n                setOpenModalUpdate(false);\r\n                // redirect page error server\r\n                props.history.push(\"/auth/500\");\r\n              }\r\n            }\r\n          }\r\n\r\n          validateOnChange={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <Form>\r\n              {/* header */}\r\n              <ModalHeader>Update Group</ModalHeader>\r\n\r\n              {/* body */}\r\n              <ModalBody className=\"m-3\">\r\n\r\n                <Row style={{ alignItems: \"center\" }}>\r\n                  <Col lg=\"auto\">\r\n                    <label>Group Name:</label>\r\n                  </Col>\r\n                  <Col>\r\n                    <FastField\r\n                      type=\"text\"\r\n                      bsSize=\"lg\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter group name\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n\r\n                <Row style={{ alignItems: \"center\" }}>\r\n                  <Col lg=\"auto\">\r\n                    <label>Total Member:</label>\r\n                  </Col>\r\n                  <Col>\r\n                    <FastField\r\n                      type=\"number\"\r\n                      bsSize=\"lg\"\r\n                      name=\"totalMember\"\r\n                      placeholder=\"Enter total member\"\r\n                      component={ReactstrapInput}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n\r\n              </ModalBody>\r\n\r\n              {/* footer */}\r\n              <ModalFooter>\r\n                <Button type=\"submit\" color=\"primary\" disabled={isSubmitting}>\r\n                  Save\r\n                </Button>{\" \"}\r\n\r\n                <Button color=\"primary\" onClick={() => setOpenModalUpdate(false)}>\r\n                  Close\r\n                </Button>\r\n              </ModalFooter>\r\n            </Form>\r\n          )}\r\n        </Formik >\r\n      </Modal>\r\n\r\n    </Container>\r\n  )\r\n};\r\n\r\nconst mapGlobalStateToProps = state => {\r\n  return {\r\n    groups: selectGroups(state),\r\n    page: selectPage(state),\r\n    size: selectSize(state),\r\n    totalSize: selectTotalSize(state),\r\n    selectedRows: selectSelectedRows(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapGlobalStateToProps, { getListGroupAction, updateSelectedRowsAction })(Group);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _createForOfIteratorHelper = require(\"D:\\\\New folder\\\\VTI_Academy\\\\ReactJS\\\\Final_Demo\\\\Frontend\\\\Group_Management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\nvar _toConsumableArray = require(\"D:\\\\New folder\\\\VTI_Academy\\\\ReactJS\\\\Final_Demo\\\\Frontend\\\\Group_Management\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var joined = args.map(function (x) {\n    return source(x);\n  }).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  var joined = '(' + args.map(function (x) {\n    return source(x);\n  }).join(\"|\") + \")\";\n  return joined;\n}\nvar keywordWrapper = function keywordWrapper(keyword) {\n  return concat(/\\b/, keyword, /\\w$/.test(keyword) ? /\\b/ : /\\B/);\n};\n\n// Keywords that require a leading dot.\nvar dotKeywords = ['Protocol',\n// contextual\n'Type' // contextual\n].map(keywordWrapper);\n\n// Keywords that may have a leading dot.\nvar optionalDotKeywords = ['init', 'self'].map(keywordWrapper);\n\n// should register as keyword, not type\nvar keywordTypes = ['Any', 'Self'];\n\n// Regular keywords and literals.\nvar keywords = [\n// strings below will be fed into the regular `keywords` engine while regex\n// will result in additional modes being created to scan for those keywords to\n// avoid conflicts with other rules\n'associatedtype', 'async', 'await', /as\\?/,\n// operator\n/as!/,\n// operator\n'as',\n// operator\n'break', 'case', 'catch', 'class', 'continue', 'convenience',\n// contextual\n'default', 'defer', 'deinit', 'didSet',\n// contextual\n'do', 'dynamic',\n// contextual\n'else', 'enum', 'extension', 'fallthrough', /fileprivate\\(set\\)/, 'fileprivate', 'final',\n// contextual\n'for', 'func', 'get',\n// contextual\n'guard', 'if', 'import', 'indirect',\n// contextual\n'infix',\n// contextual\n/init\\?/, /init!/, 'inout', /internal\\(set\\)/, 'internal', 'in', 'is',\n// operator\n'lazy',\n// contextual\n'let', 'mutating',\n// contextual\n'nonmutating',\n// contextual\n/open\\(set\\)/,\n// contextual\n'open',\n// contextual\n'operator', 'optional',\n// contextual\n'override',\n// contextual\n'postfix',\n// contextual\n'precedencegroup', 'prefix',\n// contextual\n/private\\(set\\)/, 'private', 'protocol', /public\\(set\\)/, 'public', 'repeat', 'required',\n// contextual\n'rethrows', 'return', 'set',\n// contextual\n'some',\n// contextual\n'static', 'struct', 'subscript', 'super', 'switch', 'throws', 'throw', /try\\?/,\n// operator\n/try!/,\n// operator\n'try',\n// operator\n'typealias', /unowned\\(safe\\)/,\n// contextual\n/unowned\\(unsafe\\)/,\n// contextual\n'unowned',\n// contextual\n'var', 'weak',\n// contextual\n'where', 'while', 'willSet' // contextual\n];\n\n// NOTE: Contextual keywords are reserved only in specific contexts.\n// Ideally, these should be matched using modes to avoid false positives.\n\n// Literals.\nvar literals = ['false', 'nil', 'true'];\n\n// Keywords used in precedence groups.\nvar precedencegroupKeywords = ['assignment', 'associativity', 'higherThan', 'left', 'lowerThan', 'none', 'right'];\n\n// Keywords that start with a number sign (#).\n// #available is handled separately.\nvar numberSignKeywords = ['#colorLiteral', '#column', '#dsohandle', '#else', '#elseif', '#endif', '#error', '#file', '#fileID', '#fileLiteral', '#filePath', '#function', '#if', '#imageLiteral', '#keyPath', '#line', '#selector', '#sourceLocation', '#warn_unqualified_access', '#warning'];\n\n// Global functions in the Standard Library.\nvar builtIns = ['abs', 'all', 'any', 'assert', 'assertionFailure', 'debugPrint', 'dump', 'fatalError', 'getVaList', 'isKnownUniquelyReferenced', 'max', 'min', 'numericCast', 'pointwiseMax', 'pointwiseMin', 'precondition', 'preconditionFailure', 'print', 'readLine', 'repeatElement', 'sequence', 'stride', 'swap', 'swift_unboxFromSwiftValueWithType', 'transcode', 'type', 'unsafeBitCast', 'unsafeDowncast', 'withExtendedLifetime', 'withUnsafeMutablePointer', 'withUnsafePointer', 'withVaList', 'withoutActuallyEscaping', 'zip'];\n\n// Valid first characters for operators.\nvar operatorHead = either(/[/=\\-+!*%<>&|^~?]/, /[\\u00A1-\\u00A7]/, /[\\u00A9\\u00AB]/, /[\\u00AC\\u00AE]/, /[\\u00B0\\u00B1]/, /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/, /[\\u2016-\\u2017]/, /[\\u2020-\\u2027]/, /[\\u2030-\\u203E]/, /[\\u2041-\\u2053]/, /[\\u2055-\\u205E]/, /[\\u2190-\\u23FF]/, /[\\u2500-\\u2775]/, /[\\u2794-\\u2BFF]/, /[\\u2E00-\\u2E7F]/, /[\\u3001-\\u3003]/, /[\\u3008-\\u3020]/, /[\\u3030]/);\n\n// Valid characters for operators.\nvar operatorCharacter = either(operatorHead, /[\\u0300-\\u036F]/, /[\\u1DC0-\\u1DFF]/, /[\\u20D0-\\u20FF]/, /[\\uFE00-\\uFE0F]/, /[\\uFE20-\\uFE2F]/\n// TODO: The following characters are also allowed, but the regex isn't supported yet.\n// /[\\u{E0100}-\\u{E01EF}]/u\n);\n\n// Valid operator.\nvar operator = concat(operatorHead, operatorCharacter, '*');\n\n// Valid first characters for identifiers.\nvar identifierHead = either(/[a-zA-Z_]/, /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/, /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/, /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/, /[\\u1E00-\\u1FFF]/, /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/, /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/, /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/, /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/, /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/, /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n// The following characters are also allowed, but the regexes aren't supported yet.\n// /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\n// /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\n// /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\n// /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\n);\n\n// Valid characters for identifiers.\nvar identifierCharacter = either(identifierHead, /\\d/, /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/);\n\n// Valid identifier.\nvar identifier = concat(identifierHead, identifierCharacter, '*');\n\n// Valid type identifier.\nvar typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');\n\n// Built-in attributes, which are highlighted as keywords.\n// @available is handled separately.\nvar keywordAttributes = ['autoclosure', concat(/convention\\(/, either('swift', 'block', 'c'), /\\)/), 'discardableResult', 'dynamicCallable', 'dynamicMemberLookup', 'escaping', 'frozen', 'GKInspectable', 'IBAction', 'IBDesignable', 'IBInspectable', 'IBOutlet', 'IBSegueAction', 'inlinable', 'main', 'nonobjc', 'NSApplicationMain', 'NSCopying', 'NSManaged', concat(/objc\\(/, identifier, /\\)/), 'objc', 'objcMembers', 'propertyWrapper', 'requires_stored_property_inits', 'testable', 'UIApplicationMain', 'unknown', 'usableFromInline'];\n\n// Contextual keywords used in @available and #available.\nvar availabilityKeywords = ['iOS', 'iOSApplicationExtension', 'macOS', 'macOSApplicationExtension', 'macCatalyst', 'macCatalystApplicationExtension', 'watchOS', 'watchOSApplicationExtension', 'tvOS', 'tvOSApplicationExtension', 'swift'];\n\n/*\nLanguage: Swift\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\nWebsite: https://swift.org\nCategory: common, system\n*/\n\n/** @type LanguageFn */\nfunction swift(hljs) {\n  var WHITESPACE = {\n    match: /\\s+/,\n    relevance: 0\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\n  var BLOCK_COMMENT = hljs.COMMENT('/\\\\*', '\\\\*/', {\n    contains: ['self']\n  });\n  var COMMENTS = [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\n  var DOT_KEYWORD = {\n    className: 'keyword',\n    begin: concat(/\\./, lookahead(either.apply(void 0, _toConsumableArray(dotKeywords).concat(_toConsumableArray(optionalDotKeywords))))),\n    end: either.apply(void 0, _toConsumableArray(dotKeywords).concat(_toConsumableArray(optionalDotKeywords))),\n    excludeBegin: true\n  };\n  var KEYWORD_GUARD = {\n    // Consume .keyword to prevent highlighting properties and methods as keywords.\n    match: concat(/\\./, either.apply(void 0, keywords)),\n    relevance: 0\n  };\n  var PLAIN_KEYWORDS = keywords.filter(function (kw) {\n    return typeof kw === 'string';\n  }).concat([\"_|0\"]); // seems common, so 0 relevance\n  var REGEX_KEYWORDS = keywords.filter(function (kw) {\n    return typeof kw !== 'string';\n  }) // find regex\n  .concat(keywordTypes).map(keywordWrapper);\n  var KEYWORD = {\n    variants: [{\n      className: 'keyword',\n      match: either.apply(void 0, _toConsumableArray(REGEX_KEYWORDS).concat(_toConsumableArray(optionalDotKeywords)))\n    }]\n  };\n  // find all the regular keywords\n  var KEYWORDS = {\n    $pattern: either(/\\b\\w+/,\n    // regular keywords\n    /#\\w+/ // number keywords\n    ),\n\n    keyword: PLAIN_KEYWORDS.concat(numberSignKeywords),\n    literal: literals\n  };\n  var KEYWORD_MODES = [DOT_KEYWORD, KEYWORD_GUARD, KEYWORD];\n\n  // https://github.com/apple/swift/tree/main/stdlib/public/core\n  var BUILT_IN_GUARD = {\n    // Consume .built_in to prevent highlighting properties and methods.\n    match: concat(/\\./, either.apply(void 0, builtIns)),\n    relevance: 0\n  };\n  var BUILT_IN = {\n    className: 'built_in',\n    match: concat(/\\b/, either.apply(void 0, builtIns), /(?=\\()/)\n  };\n  var BUILT_INS = [BUILT_IN_GUARD, BUILT_IN];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\n  var OPERATOR_GUARD = {\n    // Prevent -> from being highlighting as an operator.\n    match: /->/,\n    relevance: 0\n  };\n  var OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    variants: [{\n      match: operator\n    }, {\n      // dot-operator: only operators that start with a dot are allowed to use dots as\n      // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\n      // characters that may also include dots.\n      match: \"\\\\.(\\\\.|\".concat(operatorCharacter, \")+\")\n    }]\n  };\n  var OPERATORS = [OPERATOR_GUARD, OPERATOR];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\n  var decimalDigits = '([0-9]_*)+';\n  var hexDigits = '([0-9a-fA-F]_*)+';\n  var NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n    // decimal floating-point-literal (subsumes decimal-literal)\n    {\n      match: \"\\\\b(\".concat(decimalDigits, \")(\\\\.(\").concat(decimalDigits, \"))?\") + \"([eE][+-]?(\".concat(decimalDigits, \"))?\\\\b\")\n    },\n    // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n    {\n      match: \"\\\\b0x(\".concat(hexDigits, \")(\\\\.(\").concat(hexDigits, \"))?\") + \"([pP][+-]?(\".concat(decimalDigits, \"))?\\\\b\")\n    },\n    // octal-literal\n    {\n      match: /\\b0o([0-7]_*)+\\b/\n    },\n    // binary-literal\n    {\n      match: /\\b0b([01]_*)+\\b/\n    }]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\n  var ESCAPED_CHARACTER = function ESCAPED_CHARACTER() {\n    var rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      className: 'subst',\n      variants: [{\n        match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/)\n      }, {\n        match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/)\n      }]\n    };\n  };\n  var ESCAPED_NEWLINE = function ESCAPED_NEWLINE() {\n    var rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      className: 'subst',\n      match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n    };\n  };\n  var INTERPOLATION = function INTERPOLATION() {\n    var rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      className: 'subst',\n      label: \"interpol\",\n      begin: concat(/\\\\/, rawDelimiter, /\\(/),\n      end: /\\)/\n    };\n  };\n  var MULTILINE_STRING = function MULTILINE_STRING() {\n    var rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      begin: concat(rawDelimiter, /\"\"\"/),\n      end: concat(/\"\"\"/, rawDelimiter),\n      contains: [ESCAPED_CHARACTER(rawDelimiter), ESCAPED_NEWLINE(rawDelimiter), INTERPOLATION(rawDelimiter)]\n    };\n  };\n  var SINGLE_LINE_STRING = function SINGLE_LINE_STRING() {\n    var rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      begin: concat(rawDelimiter, /\"/),\n      end: concat(/\"/, rawDelimiter),\n      contains: [ESCAPED_CHARACTER(rawDelimiter), INTERPOLATION(rawDelimiter)]\n    };\n  };\n  var STRING = {\n    className: 'string',\n    variants: [MULTILINE_STRING(), MULTILINE_STRING(\"#\"), MULTILINE_STRING(\"##\"), MULTILINE_STRING(\"###\"), SINGLE_LINE_STRING(), SINGLE_LINE_STRING(\"#\"), SINGLE_LINE_STRING(\"##\"), SINGLE_LINE_STRING(\"###\")]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\n  var QUOTED_IDENTIFIER = {\n    match: concat(/`/, identifier, /`/)\n  };\n  var IMPLICIT_PARAMETER = {\n    className: 'variable',\n    match: /\\$\\d+/\n  };\n  var PROPERTY_WRAPPER_PROJECTION = {\n    className: 'variable',\n    match: \"\\\\$\".concat(identifierCharacter, \"+\")\n  };\n  var IDENTIFIERS = [QUOTED_IDENTIFIER, IMPLICIT_PARAMETER, PROPERTY_WRAPPER_PROJECTION];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\n  var AVAILABLE_ATTRIBUTE = {\n    match: /(@|#)available/,\n    className: \"keyword\",\n    starts: {\n      contains: [{\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: availabilityKeywords,\n        contains: [].concat(OPERATORS, [NUMBER, STRING])\n      }]\n    }\n  };\n  var KEYWORD_ATTRIBUTE = {\n    className: 'keyword',\n    match: concat(/@/, either.apply(void 0, keywordAttributes))\n  };\n  var USER_DEFINED_ATTRIBUTE = {\n    className: 'meta',\n    match: concat(/@/, identifier)\n  };\n  var ATTRIBUTES = [AVAILABLE_ATTRIBUTE, KEYWORD_ATTRIBUTE, USER_DEFINED_ATTRIBUTE];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Types.html\n  var TYPE = {\n    match: lookahead(/\\b[A-Z]/),\n    relevance: 0,\n    contains: [{\n      // Common Apple frameworks, for relevance boost\n      className: 'type',\n      match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')\n    }, {\n      // Type identifier\n      className: 'type',\n      match: typeIdentifier,\n      relevance: 0\n    }, {\n      // Optional type\n      match: /[?!]+/,\n      relevance: 0\n    }, {\n      // Variadic parameter\n      match: /\\.\\.\\./,\n      relevance: 0\n    }, {\n      // Protocol composition\n      match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\n      relevance: 0\n    }]\n  };\n  var GENERIC_ARGUMENTS = {\n    begin: /</,\n    end: />/,\n    keywords: KEYWORDS,\n    contains: [].concat(COMMENTS, KEYWORD_MODES, ATTRIBUTES, [OPERATOR_GUARD, TYPE])\n  };\n  TYPE.contains.push(GENERIC_ARGUMENTS);\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\n  // Prevents element names from being highlighted as keywords.\n  var TUPLE_ELEMENT_NAME = {\n    match: concat(identifier, /\\s*:/),\n    keywords: \"_|0\",\n    relevance: 0\n  };\n  // Matches tuples as well as the parameter list of a function type.\n  var TUPLE = {\n    begin: /\\(/,\n    end: /\\)/,\n    relevance: 0,\n    keywords: KEYWORDS,\n    contains: ['self', TUPLE_ELEMENT_NAME].concat(COMMENTS, KEYWORD_MODES, BUILT_INS, OPERATORS, [NUMBER, STRING], IDENTIFIERS, ATTRIBUTES, [TYPE])\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\n  // Matches both the keyword func and the function title.\n  // Grouping these lets us differentiate between the operator function <\n  // and the start of the generic parameter clause (also <).\n  var FUNC_PLUS_TITLE = {\n    beginKeywords: 'func',\n    contains: [{\n      className: 'title',\n      match: either(QUOTED_IDENTIFIER.match, identifier, operator),\n      // Required to make sure the opening < of the generic parameter clause\n      // isn't parsed as a second title.\n      endsParent: true,\n      relevance: 0\n    }, WHITESPACE]\n  };\n  var GENERIC_PARAMETERS = {\n    begin: /</,\n    end: />/,\n    contains: [].concat(COMMENTS, [TYPE])\n  };\n  var FUNCTION_PARAMETER_NAME = {\n    begin: either(lookahead(concat(identifier, /\\s*:/)), lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))),\n    end: /:/,\n    relevance: 0,\n    contains: [{\n      className: 'keyword',\n      match: /\\b_\\b/\n    }, {\n      className: 'params',\n      match: identifier\n    }]\n  };\n  var FUNCTION_PARAMETERS = {\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [FUNCTION_PARAMETER_NAME].concat(COMMENTS, KEYWORD_MODES, OPERATORS, [NUMBER, STRING], ATTRIBUTES, [TYPE, TUPLE]),\n    endsParent: true,\n    illegal: /[\"']/\n  };\n  var FUNCTION = {\n    className: 'function',\n    match: lookahead(/\\bfunc\\b/),\n    contains: [FUNC_PLUS_TITLE, GENERIC_PARAMETERS, FUNCTION_PARAMETERS, WHITESPACE],\n    illegal: [/\\[/, /%/]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\n  var INIT_SUBSCRIPT = {\n    className: 'function',\n    match: /\\b(subscript|init[?!]?)\\s*(?=[<(])/,\n    keywords: {\n      keyword: \"subscript init init? init!\",\n      $pattern: /\\w+[?!]?/\n    },\n    contains: [GENERIC_PARAMETERS, FUNCTION_PARAMETERS, WHITESPACE],\n    illegal: /\\[|%/\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\n  var OPERATOR_DECLARATION = {\n    beginKeywords: 'operator',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [{\n      className: 'title',\n      match: operator,\n      endsParent: true,\n      relevance: 0\n    }]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\n  var PRECEDENCEGROUP = {\n    beginKeywords: 'precedencegroup',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [{\n      className: 'title',\n      match: typeIdentifier,\n      relevance: 0\n    }, {\n      begin: /{/,\n      end: /}/,\n      relevance: 0,\n      endsParent: true,\n      keywords: [].concat(precedencegroupKeywords, literals),\n      contains: [TYPE]\n    }]\n  };\n\n  // Add supported submodes to string interpolation.\n  var _iterator = _createForOfIteratorHelper(STRING.variants),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var variant = _step.value;\n      var interpolation = variant.contains.find(function (mode) {\n        return mode.label === \"interpol\";\n      });\n      // TODO: Interpolation can contain any expression, so there's room for improvement here.\n      interpolation.keywords = KEYWORDS;\n      var submodes = [].concat(KEYWORD_MODES, BUILT_INS, OPERATORS, [NUMBER, STRING], IDENTIFIERS);\n      interpolation.contains = [].concat(_toConsumableArray(submodes), [{\n        begin: /\\(/,\n        end: /\\)/,\n        contains: ['self'].concat(_toConsumableArray(submodes))\n      }]);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    name: 'Swift',\n    keywords: KEYWORDS,\n    contains: [].concat(COMMENTS, [FUNCTION, INIT_SUBSCRIPT, {\n      className: 'class',\n      beginKeywords: 'struct protocol class extension enum',\n      end: '\\\\{',\n      excludeEnd: true,\n      keywords: KEYWORDS,\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\n      })].concat(KEYWORD_MODES)\n    }, OPERATOR_DECLARATION, PRECEDENCEGROUP, {\n      beginKeywords: 'import',\n      end: /$/,\n      contains: [].concat(COMMENTS),\n      relevance: 0\n    }], KEYWORD_MODES, BUILT_INS, OPERATORS, [NUMBER, STRING], IDENTIFIERS, ATTRIBUTES, [TYPE, TUPLE])\n  };\n}\nmodule.exports = swift;","map":{"version":3,"names":["source","re","lookahead","concat","_len","arguments","length","args","Array","_key","joined","map","x","join","either","_len2","_key2","keywordWrapper","keyword","test","dotKeywords","optionalDotKeywords","keywordTypes","keywords","literals","precedencegroupKeywords","numberSignKeywords","builtIns","operatorHead","operatorCharacter","operator","identifierHead","identifierCharacter","identifier","typeIdentifier","keywordAttributes","availabilityKeywords","swift","hljs","WHITESPACE","match","relevance","BLOCK_COMMENT","COMMENT","contains","COMMENTS","C_LINE_COMMENT_MODE","DOT_KEYWORD","className","begin","apply","_toConsumableArray","end","excludeBegin","KEYWORD_GUARD","PLAIN_KEYWORDS","filter","kw","REGEX_KEYWORDS","KEYWORD","variants","KEYWORDS","$pattern","literal","KEYWORD_MODES","BUILT_IN_GUARD","BUILT_IN","BUILT_INS","OPERATOR_GUARD","OPERATOR","OPERATORS","decimalDigits","hexDigits","NUMBER","ESCAPED_CHARACTER","rawDelimiter","undefined","ESCAPED_NEWLINE","INTERPOLATION","label","MULTILINE_STRING","SINGLE_LINE_STRING","STRING","QUOTED_IDENTIFIER","IMPLICIT_PARAMETER","PROPERTY_WRAPPER_PROJECTION","IDENTIFIERS","AVAILABLE_ATTRIBUTE","starts","KEYWORD_ATTRIBUTE","USER_DEFINED_ATTRIBUTE","ATTRIBUTES","TYPE","GENERIC_ARGUMENTS","push","TUPLE_ELEMENT_NAME","TUPLE","FUNC_PLUS_TITLE","beginKeywords","endsParent","GENERIC_PARAMETERS","FUNCTION_PARAMETER_NAME","FUNCTION_PARAMETERS","illegal","FUNCTION","INIT_SUBSCRIPT","OPERATOR_DECLARATION","MATCH_NOTHING_RE","PRECEDENCEGROUP","_iterator","_createForOfIteratorHelper","_step","s","n","done","variant","value","interpolation","find","mode","submodes","err","e","f","name","excludeEnd","inherit","TITLE_MODE","module","exports"],"sources":["D:/New folder/VTI_Academy/ReactJS/Final_Demo/Frontend/Group_Management/node_modules/highlight.js/lib/languages/swift.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\nconst keywordWrapper = keyword => concat(\n  /\\b/,\n  keyword,\n  /\\w$/.test(keyword) ? /\\b/ : /\\B/\n);\n\n// Keywords that require a leading dot.\nconst dotKeywords = [\n  'Protocol', // contextual\n  'Type' // contextual\n].map(keywordWrapper);\n\n// Keywords that may have a leading dot.\nconst optionalDotKeywords = [\n  'init',\n  'self'\n].map(keywordWrapper);\n\n// should register as keyword, not type\nconst keywordTypes = [\n  'Any',\n  'Self'\n];\n\n// Regular keywords and literals.\nconst keywords = [\n  // strings below will be fed into the regular `keywords` engine while regex\n  // will result in additional modes being created to scan for those keywords to\n  // avoid conflicts with other rules\n  'associatedtype',\n  'async',\n  'await',\n  /as\\?/, // operator\n  /as!/, // operator\n  'as', // operator\n  'break',\n  'case',\n  'catch',\n  'class',\n  'continue',\n  'convenience', // contextual\n  'default',\n  'defer',\n  'deinit',\n  'didSet', // contextual\n  'do',\n  'dynamic', // contextual\n  'else',\n  'enum',\n  'extension',\n  'fallthrough',\n  /fileprivate\\(set\\)/,\n  'fileprivate',\n  'final', // contextual\n  'for',\n  'func',\n  'get', // contextual\n  'guard',\n  'if',\n  'import',\n  'indirect', // contextual\n  'infix', // contextual\n  /init\\?/,\n  /init!/,\n  'inout',\n  /internal\\(set\\)/,\n  'internal',\n  'in',\n  'is', // operator\n  'lazy', // contextual\n  'let',\n  'mutating', // contextual\n  'nonmutating', // contextual\n  /open\\(set\\)/, // contextual\n  'open', // contextual\n  'operator',\n  'optional', // contextual\n  'override', // contextual\n  'postfix', // contextual\n  'precedencegroup',\n  'prefix', // contextual\n  /private\\(set\\)/,\n  'private',\n  'protocol',\n  /public\\(set\\)/,\n  'public',\n  'repeat',\n  'required', // contextual\n  'rethrows',\n  'return',\n  'set', // contextual\n  'some', // contextual\n  'static',\n  'struct',\n  'subscript',\n  'super',\n  'switch',\n  'throws',\n  'throw',\n  /try\\?/, // operator\n  /try!/, // operator\n  'try', // operator\n  'typealias',\n  /unowned\\(safe\\)/, // contextual\n  /unowned\\(unsafe\\)/, // contextual\n  'unowned', // contextual\n  'var',\n  'weak', // contextual\n  'where',\n  'while',\n  'willSet' // contextual\n];\n\n// NOTE: Contextual keywords are reserved only in specific contexts.\n// Ideally, these should be matched using modes to avoid false positives.\n\n// Literals.\nconst literals = [\n  'false',\n  'nil',\n  'true'\n];\n\n// Keywords used in precedence groups.\nconst precedencegroupKeywords = [\n  'assignment',\n  'associativity',\n  'higherThan',\n  'left',\n  'lowerThan',\n  'none',\n  'right'\n];\n\n// Keywords that start with a number sign (#).\n// #available is handled separately.\nconst numberSignKeywords = [\n  '#colorLiteral',\n  '#column',\n  '#dsohandle',\n  '#else',\n  '#elseif',\n  '#endif',\n  '#error',\n  '#file',\n  '#fileID',\n  '#fileLiteral',\n  '#filePath',\n  '#function',\n  '#if',\n  '#imageLiteral',\n  '#keyPath',\n  '#line',\n  '#selector',\n  '#sourceLocation',\n  '#warn_unqualified_access',\n  '#warning'\n];\n\n// Global functions in the Standard Library.\nconst builtIns = [\n  'abs',\n  'all',\n  'any',\n  'assert',\n  'assertionFailure',\n  'debugPrint',\n  'dump',\n  'fatalError',\n  'getVaList',\n  'isKnownUniquelyReferenced',\n  'max',\n  'min',\n  'numericCast',\n  'pointwiseMax',\n  'pointwiseMin',\n  'precondition',\n  'preconditionFailure',\n  'print',\n  'readLine',\n  'repeatElement',\n  'sequence',\n  'stride',\n  'swap',\n  'swift_unboxFromSwiftValueWithType',\n  'transcode',\n  'type',\n  'unsafeBitCast',\n  'unsafeDowncast',\n  'withExtendedLifetime',\n  'withUnsafeMutablePointer',\n  'withUnsafePointer',\n  'withVaList',\n  'withoutActuallyEscaping',\n  'zip'\n];\n\n// Valid first characters for operators.\nconst operatorHead = either(\n  /[/=\\-+!*%<>&|^~?]/,\n  /[\\u00A1-\\u00A7]/,\n  /[\\u00A9\\u00AB]/,\n  /[\\u00AC\\u00AE]/,\n  /[\\u00B0\\u00B1]/,\n  /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/,\n  /[\\u2016-\\u2017]/,\n  /[\\u2020-\\u2027]/,\n  /[\\u2030-\\u203E]/,\n  /[\\u2041-\\u2053]/,\n  /[\\u2055-\\u205E]/,\n  /[\\u2190-\\u23FF]/,\n  /[\\u2500-\\u2775]/,\n  /[\\u2794-\\u2BFF]/,\n  /[\\u2E00-\\u2E7F]/,\n  /[\\u3001-\\u3003]/,\n  /[\\u3008-\\u3020]/,\n  /[\\u3030]/\n);\n\n// Valid characters for operators.\nconst operatorCharacter = either(\n  operatorHead,\n  /[\\u0300-\\u036F]/,\n  /[\\u1DC0-\\u1DFF]/,\n  /[\\u20D0-\\u20FF]/,\n  /[\\uFE00-\\uFE0F]/,\n  /[\\uFE20-\\uFE2F]/\n  // TODO: The following characters are also allowed, but the regex isn't supported yet.\n  // /[\\u{E0100}-\\u{E01EF}]/u\n);\n\n// Valid operator.\nconst operator = concat(operatorHead, operatorCharacter, '*');\n\n// Valid first characters for identifiers.\nconst identifierHead = either(\n  /[a-zA-Z_]/,\n  /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/,\n  /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/,\n  /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/,\n  /[\\u1E00-\\u1FFF]/,\n  /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/,\n  /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/,\n  /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/,\n  /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/,\n  /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/,\n  /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n  // The following characters are also allowed, but the regexes aren't supported yet.\n  // /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\n  // /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\n  // /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\n  // /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\n);\n\n// Valid characters for identifiers.\nconst identifierCharacter = either(\n  identifierHead,\n  /\\d/,\n  /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/\n);\n\n// Valid identifier.\nconst identifier = concat(identifierHead, identifierCharacter, '*');\n\n// Valid type identifier.\nconst typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');\n\n// Built-in attributes, which are highlighted as keywords.\n// @available is handled separately.\nconst keywordAttributes = [\n  'autoclosure',\n  concat(/convention\\(/, either('swift', 'block', 'c'), /\\)/),\n  'discardableResult',\n  'dynamicCallable',\n  'dynamicMemberLookup',\n  'escaping',\n  'frozen',\n  'GKInspectable',\n  'IBAction',\n  'IBDesignable',\n  'IBInspectable',\n  'IBOutlet',\n  'IBSegueAction',\n  'inlinable',\n  'main',\n  'nonobjc',\n  'NSApplicationMain',\n  'NSCopying',\n  'NSManaged',\n  concat(/objc\\(/, identifier, /\\)/),\n  'objc',\n  'objcMembers',\n  'propertyWrapper',\n  'requires_stored_property_inits',\n  'testable',\n  'UIApplicationMain',\n  'unknown',\n  'usableFromInline'\n];\n\n// Contextual keywords used in @available and #available.\nconst availabilityKeywords = [\n  'iOS',\n  'iOSApplicationExtension',\n  'macOS',\n  'macOSApplicationExtension',\n  'macCatalyst',\n  'macCatalystApplicationExtension',\n  'watchOS',\n  'watchOSApplicationExtension',\n  'tvOS',\n  'tvOSApplicationExtension',\n  'swift'\n];\n\n/*\nLanguage: Swift\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\nWebsite: https://swift.org\nCategory: common, system\n*/\n\n/** @type LanguageFn */\nfunction swift(hljs) {\n  const WHITESPACE = {\n    match: /\\s+/,\n    relevance: 0\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\n  const BLOCK_COMMENT = hljs.COMMENT(\n    '/\\\\*',\n    '\\\\*/',\n    {\n      contains: [ 'self' ]\n    }\n  );\n  const COMMENTS = [\n    hljs.C_LINE_COMMENT_MODE,\n    BLOCK_COMMENT\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\n  const DOT_KEYWORD = {\n    className: 'keyword',\n    begin: concat(/\\./, lookahead(either(...dotKeywords, ...optionalDotKeywords))),\n    end: either(...dotKeywords, ...optionalDotKeywords),\n    excludeBegin: true\n  };\n  const KEYWORD_GUARD = {\n    // Consume .keyword to prevent highlighting properties and methods as keywords.\n    match: concat(/\\./, either(...keywords)),\n    relevance: 0\n  };\n  const PLAIN_KEYWORDS = keywords\n    .filter(kw => typeof kw === 'string')\n    .concat([ \"_|0\" ]); // seems common, so 0 relevance\n  const REGEX_KEYWORDS = keywords\n    .filter(kw => typeof kw !== 'string') // find regex\n    .concat(keywordTypes)\n    .map(keywordWrapper);\n  const KEYWORD = {\n    variants: [\n      {\n        className: 'keyword',\n        match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\n      }\n    ]\n  };\n  // find all the regular keywords\n  const KEYWORDS = {\n    $pattern: either(\n      /\\b\\w+/, // regular keywords\n      /#\\w+/ // number keywords\n    ),\n    keyword: PLAIN_KEYWORDS\n      .concat(numberSignKeywords),\n    literal: literals\n  };\n  const KEYWORD_MODES = [\n    DOT_KEYWORD,\n    KEYWORD_GUARD,\n    KEYWORD\n  ];\n\n  // https://github.com/apple/swift/tree/main/stdlib/public/core\n  const BUILT_IN_GUARD = {\n    // Consume .built_in to prevent highlighting properties and methods.\n    match: concat(/\\./, either(...builtIns)),\n    relevance: 0\n  };\n  const BUILT_IN = {\n    className: 'built_in',\n    match: concat(/\\b/, either(...builtIns), /(?=\\()/)\n  };\n  const BUILT_INS = [\n    BUILT_IN_GUARD,\n    BUILT_IN\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\n  const OPERATOR_GUARD = {\n    // Prevent -> from being highlighting as an operator.\n    match: /->/,\n    relevance: 0\n  };\n  const OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    variants: [\n      {\n        match: operator\n      },\n      {\n        // dot-operator: only operators that start with a dot are allowed to use dots as\n        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\n        // characters that may also include dots.\n        match: `\\\\.(\\\\.|${operatorCharacter})+`\n      }\n    ]\n  };\n  const OPERATORS = [\n    OPERATOR_GUARD,\n    OPERATOR\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\n  const decimalDigits = '([0-9]_*)+';\n  const hexDigits = '([0-9a-fA-F]_*)+';\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // decimal floating-point-literal (subsumes decimal-literal)\n      {\n        match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b`\n      },\n      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n      {\n        match: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b`\n      },\n      // octal-literal\n      {\n        match: /\\b0o([0-7]_*)+\\b/\n      },\n      // binary-literal\n      {\n        match: /\\b0b([01]_*)+\\b/\n      }\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\n  const ESCAPED_CHARACTER = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    variants: [\n      {\n        match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/)\n      },\n      {\n        match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/)\n      }\n    ]\n  });\n  const ESCAPED_NEWLINE = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n  });\n  const INTERPOLATION = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    label: \"interpol\",\n    begin: concat(/\\\\/, rawDelimiter, /\\(/),\n    end: /\\)/\n  });\n  const MULTILINE_STRING = (rawDelimiter = \"\") => ({\n    begin: concat(rawDelimiter, /\"\"\"/),\n    end: concat(/\"\"\"/, rawDelimiter),\n    contains: [\n      ESCAPED_CHARACTER(rawDelimiter),\n      ESCAPED_NEWLINE(rawDelimiter),\n      INTERPOLATION(rawDelimiter)\n    ]\n  });\n  const SINGLE_LINE_STRING = (rawDelimiter = \"\") => ({\n    begin: concat(rawDelimiter, /\"/),\n    end: concat(/\"/, rawDelimiter),\n    contains: [\n      ESCAPED_CHARACTER(rawDelimiter),\n      INTERPOLATION(rawDelimiter)\n    ]\n  });\n  const STRING = {\n    className: 'string',\n    variants: [\n      MULTILINE_STRING(),\n      MULTILINE_STRING(\"#\"),\n      MULTILINE_STRING(\"##\"),\n      MULTILINE_STRING(\"###\"),\n      SINGLE_LINE_STRING(),\n      SINGLE_LINE_STRING(\"#\"),\n      SINGLE_LINE_STRING(\"##\"),\n      SINGLE_LINE_STRING(\"###\")\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\n  const QUOTED_IDENTIFIER = {\n    match: concat(/`/, identifier, /`/)\n  };\n  const IMPLICIT_PARAMETER = {\n    className: 'variable',\n    match: /\\$\\d+/\n  };\n  const PROPERTY_WRAPPER_PROJECTION = {\n    className: 'variable',\n    match: `\\\\$${identifierCharacter}+`\n  };\n  const IDENTIFIERS = [\n    QUOTED_IDENTIFIER,\n    IMPLICIT_PARAMETER,\n    PROPERTY_WRAPPER_PROJECTION\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\n  const AVAILABLE_ATTRIBUTE = {\n    match: /(@|#)available/,\n    className: \"keyword\",\n    starts: {\n      contains: [\n        {\n          begin: /\\(/,\n          end: /\\)/,\n          keywords: availabilityKeywords,\n          contains: [\n            ...OPERATORS,\n            NUMBER,\n            STRING\n          ]\n        }\n      ]\n    }\n  };\n  const KEYWORD_ATTRIBUTE = {\n    className: 'keyword',\n    match: concat(/@/, either(...keywordAttributes))\n  };\n  const USER_DEFINED_ATTRIBUTE = {\n    className: 'meta',\n    match: concat(/@/, identifier)\n  };\n  const ATTRIBUTES = [\n    AVAILABLE_ATTRIBUTE,\n    KEYWORD_ATTRIBUTE,\n    USER_DEFINED_ATTRIBUTE\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Types.html\n  const TYPE = {\n    match: lookahead(/\\b[A-Z]/),\n    relevance: 0,\n    contains: [\n      { // Common Apple frameworks, for relevance boost\n        className: 'type',\n        match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')\n      },\n      { // Type identifier\n        className: 'type',\n        match: typeIdentifier,\n        relevance: 0\n      },\n      { // Optional type\n        match: /[?!]+/,\n        relevance: 0\n      },\n      { // Variadic parameter\n        match: /\\.\\.\\./,\n        relevance: 0\n      },\n      { // Protocol composition\n        match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\n        relevance: 0\n      }\n    ]\n  };\n  const GENERIC_ARGUMENTS = {\n    begin: /</,\n    end: />/,\n    keywords: KEYWORDS,\n    contains: [\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...ATTRIBUTES,\n      OPERATOR_GUARD,\n      TYPE\n    ]\n  };\n  TYPE.contains.push(GENERIC_ARGUMENTS);\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\n  // Prevents element names from being highlighted as keywords.\n  const TUPLE_ELEMENT_NAME = {\n    match: concat(identifier, /\\s*:/),\n    keywords: \"_|0\",\n    relevance: 0\n  };\n  // Matches tuples as well as the parameter list of a function type.\n  const TUPLE = {\n    begin: /\\(/,\n    end: /\\)/,\n    relevance: 0,\n    keywords: KEYWORDS,\n    contains: [\n      'self',\n      TUPLE_ELEMENT_NAME,\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS,\n      ...ATTRIBUTES,\n      TYPE\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\n  // Matches both the keyword func and the function title.\n  // Grouping these lets us differentiate between the operator function <\n  // and the start of the generic parameter clause (also <).\n  const FUNC_PLUS_TITLE = {\n    beginKeywords: 'func',\n    contains: [\n      {\n        className: 'title',\n        match: either(QUOTED_IDENTIFIER.match, identifier, operator),\n        // Required to make sure the opening < of the generic parameter clause\n        // isn't parsed as a second title.\n        endsParent: true,\n        relevance: 0\n      },\n      WHITESPACE\n    ]\n  };\n  const GENERIC_PARAMETERS = {\n    begin: /</,\n    end: />/,\n    contains: [\n      ...COMMENTS,\n      TYPE\n    ]\n  };\n  const FUNCTION_PARAMETER_NAME = {\n    begin: either(\n      lookahead(concat(identifier, /\\s*:/)),\n      lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))\n    ),\n    end: /:/,\n    relevance: 0,\n    contains: [\n      {\n        className: 'keyword',\n        match: /\\b_\\b/\n      },\n      {\n        className: 'params',\n        match: identifier\n      }\n    ]\n  };\n  const FUNCTION_PARAMETERS = {\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [\n      FUNCTION_PARAMETER_NAME,\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...ATTRIBUTES,\n      TYPE,\n      TUPLE\n    ],\n    endsParent: true,\n    illegal: /[\"']/\n  };\n  const FUNCTION = {\n    className: 'function',\n    match: lookahead(/\\bfunc\\b/),\n    contains: [\n      FUNC_PLUS_TITLE,\n      GENERIC_PARAMETERS,\n      FUNCTION_PARAMETERS,\n      WHITESPACE\n    ],\n    illegal: [\n      /\\[/,\n      /%/\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\n  const INIT_SUBSCRIPT = {\n    className: 'function',\n    match: /\\b(subscript|init[?!]?)\\s*(?=[<(])/,\n    keywords: {\n      keyword: \"subscript init init? init!\",\n      $pattern: /\\w+[?!]?/\n    },\n    contains: [\n      GENERIC_PARAMETERS,\n      FUNCTION_PARAMETERS,\n      WHITESPACE\n    ],\n    illegal: /\\[|%/\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\n  const OPERATOR_DECLARATION = {\n    beginKeywords: 'operator',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [\n      {\n        className: 'title',\n        match: operator,\n        endsParent: true,\n        relevance: 0\n      }\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\n  const PRECEDENCEGROUP = {\n    beginKeywords: 'precedencegroup',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [\n      {\n        className: 'title',\n        match: typeIdentifier,\n        relevance: 0\n      },\n      {\n        begin: /{/,\n        end: /}/,\n        relevance: 0,\n        endsParent: true,\n        keywords: [\n          ...precedencegroupKeywords,\n          ...literals\n        ],\n        contains: [ TYPE ]\n      }\n    ]\n  };\n\n  // Add supported submodes to string interpolation.\n  for (const variant of STRING.variants) {\n    const interpolation = variant.contains.find(mode => mode.label === \"interpol\");\n    // TODO: Interpolation can contain any expression, so there's room for improvement here.\n    interpolation.keywords = KEYWORDS;\n    const submodes = [\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS\n    ];\n    interpolation.contains = [\n      ...submodes,\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        contains: [\n          'self',\n          ...submodes\n        ]\n      }\n    ];\n  }\n\n  return {\n    name: 'Swift',\n    keywords: KEYWORDS,\n    contains: [\n      ...COMMENTS,\n      FUNCTION,\n      INIT_SUBSCRIPT,\n      {\n        className: 'class',\n        beginKeywords: 'struct protocol class extension enum',\n        end: '\\\\{',\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {\n            begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\n          }),\n          ...KEYWORD_MODES\n        ]\n      },\n      OPERATOR_DECLARATION,\n      PRECEDENCEGROUP,\n      {\n        beginKeywords: 'import',\n        end: /$/,\n        contains: [ ...COMMENTS ],\n        relevance: 0\n      },\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS,\n      ...ATTRIBUTES,\n      TYPE,\n      TUPLE\n    ]\n  };\n}\n\nmodule.exports = swift;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAASA,MAAMA,CAACC,EAAE,EAAE;EAClB,IAAI,CAACA,EAAE,EAAE,OAAO,IAAI;EACpB,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE,OAAOA,EAAE;EAErC,OAAOA,EAAE,CAACD,MAAM;AAClB;;AAEA;AACA;AACA;AACA;AACA,SAASE,SAASA,CAACD,EAAE,EAAE;EACrB,OAAOE,MAAM,CAAC,KAAK,EAAEF,EAAE,EAAE,GAAG,CAAC;AAC/B;;AAEA;AACA;AACA;AACA;AACA,SAASE,MAAMA,CAAA,EAAU;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACrB,IAAMC,MAAM,GAAGH,IAAI,CAACI,GAAG,CAAC,UAACC,CAAC;IAAA,OAAKZ,MAAM,CAACY,CAAC,CAAC;EAAA,EAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EAClD,OAAOH,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,MAAMA,CAAA,EAAU;EAAA,SAAAC,KAAA,GAAAV,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAO,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAJT,IAAI,CAAAS,KAAA,IAAAX,SAAA,CAAAW,KAAA;EAAA;EACrB,IAAMN,MAAM,GAAG,GAAG,GAAGH,IAAI,CAACI,GAAG,CAAC,UAACC,CAAC;IAAA,OAAKZ,MAAM,CAACY,CAAC,CAAC;EAAA,EAAC,CAACC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;EAC/D,OAAOH,MAAM;AACf;AAEA,IAAMO,cAAc,GAAG,SAAjBA,cAAcA,CAAGC,OAAO;EAAA,OAAIf,MAAM,CACtC,IAAI,EACJe,OAAO,EACP,KAAK,CAACC,IAAI,CAACD,OAAO,CAAC,GAAG,IAAI,GAAG,IAAI,CAClC;AAAA;;AAED;AACA,IAAME,WAAW,GAAG,CAClB,UAAU;AAAE;AACZ,MAAM,CAAC;AAAA,CACR,CAACT,GAAG,CAACM,cAAc,CAAC;;AAErB;AACA,IAAMI,mBAAmB,GAAG,CAC1B,MAAM,EACN,MAAM,CACP,CAACV,GAAG,CAACM,cAAc,CAAC;;AAErB;AACA,IAAMK,YAAY,GAAG,CACnB,KAAK,EACL,MAAM,CACP;;AAED;AACA,IAAMC,QAAQ,GAAG;AACf;AACA;AACA;AACA,gBAAgB,EAChB,OAAO,EACP,OAAO,EACP,MAAM;AAAE;AACR,KAAK;AAAE;AACP,IAAI;AAAE;AACN,OAAO,EACP,MAAM,EACN,OAAO,EACP,OAAO,EACP,UAAU,EACV,aAAa;AAAE;AACf,SAAS,EACT,OAAO,EACP,QAAQ,EACR,QAAQ;AAAE;AACV,IAAI,EACJ,SAAS;AAAE;AACX,MAAM,EACN,MAAM,EACN,WAAW,EACX,aAAa,EACb,oBAAoB,EACpB,aAAa,EACb,OAAO;AAAE;AACT,KAAK,EACL,MAAM,EACN,KAAK;AAAE;AACP,OAAO,EACP,IAAI,EACJ,QAAQ,EACR,UAAU;AAAE;AACZ,OAAO;AAAE;AACT,QAAQ,EACR,OAAO,EACP,OAAO,EACP,iBAAiB,EACjB,UAAU,EACV,IAAI,EACJ,IAAI;AAAE;AACN,MAAM;AAAE;AACR,KAAK,EACL,UAAU;AAAE;AACZ,aAAa;AAAE;AACf,aAAa;AAAE;AACf,MAAM;AAAE;AACR,UAAU,EACV,UAAU;AAAE;AACZ,UAAU;AAAE;AACZ,SAAS;AAAE;AACX,iBAAiB,EACjB,QAAQ;AAAE;AACV,gBAAgB,EAChB,SAAS,EACT,UAAU,EACV,eAAe,EACf,QAAQ,EACR,QAAQ,EACR,UAAU;AAAE;AACZ,UAAU,EACV,QAAQ,EACR,KAAK;AAAE;AACP,MAAM;AAAE;AACR,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,OAAO;AAAE;AACT,MAAM;AAAE;AACR,KAAK;AAAE;AACP,WAAW,EACX,iBAAiB;AAAE;AACnB,mBAAmB;AAAE;AACrB,SAAS;AAAE;AACX,KAAK,EACL,MAAM;AAAE;AACR,OAAO,EACP,OAAO,EACP,SAAS,CAAC;AAAA,CACX;;AAED;AACA;;AAEA;AACA,IAAMC,QAAQ,GAAG,CACf,OAAO,EACP,KAAK,EACL,MAAM,CACP;;AAED;AACA,IAAMC,uBAAuB,GAAG,CAC9B,YAAY,EACZ,eAAe,EACf,YAAY,EACZ,MAAM,EACN,WAAW,EACX,MAAM,EACN,OAAO,CACR;;AAED;AACA;AACA,IAAMC,kBAAkB,GAAG,CACzB,eAAe,EACf,SAAS,EACT,YAAY,EACZ,OAAO,EACP,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,SAAS,EACT,cAAc,EACd,WAAW,EACX,WAAW,EACX,KAAK,EACL,eAAe,EACf,UAAU,EACV,OAAO,EACP,WAAW,EACX,iBAAiB,EACjB,0BAA0B,EAC1B,UAAU,CACX;;AAED;AACA,IAAMC,QAAQ,GAAG,CACf,KAAK,EACL,KAAK,EACL,KAAK,EACL,QAAQ,EACR,kBAAkB,EAClB,YAAY,EACZ,MAAM,EACN,YAAY,EACZ,WAAW,EACX,2BAA2B,EAC3B,KAAK,EACL,KAAK,EACL,aAAa,EACb,cAAc,EACd,cAAc,EACd,cAAc,EACd,qBAAqB,EACrB,OAAO,EACP,UAAU,EACV,eAAe,EACf,UAAU,EACV,QAAQ,EACR,MAAM,EACN,mCAAmC,EACnC,WAAW,EACX,MAAM,EACN,eAAe,EACf,gBAAgB,EAChB,sBAAsB,EACtB,0BAA0B,EAC1B,mBAAmB,EACnB,YAAY,EACZ,yBAAyB,EACzB,KAAK,CACN;;AAED;AACA,IAAMC,YAAY,GAAGd,MAAM,CACzB,mBAAmB,EACnB,iBAAiB,EACjB,gBAAgB,EAChB,gBAAgB,EAChB,gBAAgB,EAChB,kCAAkC,EAClC,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,UAAU,CACX;;AAED;AACA,IAAMe,iBAAiB,GAAGf,MAAM,CAC9Bc,YAAY,EACZ,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB;AACA;AACA;AAAA,CACD;;AAED;AACA,IAAME,QAAQ,GAAG3B,MAAM,CAACyB,YAAY,EAAEC,iBAAiB,EAAE,GAAG,CAAC;;AAE7D;AACA,IAAME,cAAc,GAAGjB,MAAM,CAC3B,WAAW,EACX,sDAAsD,EACtD,wDAAwD,EACxD,wDAAwD,EACxD,iBAAiB,EACjB,8DAA8D,EAC9D,wDAAwD,EACxD,8BAA8B,EAC9B,wDAAwD,EACxD,wDAAwD,EACxD,8BAA8B,CAAC;AAC/B;AACA;AACA;AACA;AACA;AAAA,CACD;;AAED;AACA,IAAMkB,mBAAmB,GAAGlB,MAAM,CAChCiB,cAAc,EACd,IAAI,EACJ,wDAAwD,CACzD;;AAED;AACA,IAAME,UAAU,GAAG9B,MAAM,CAAC4B,cAAc,EAAEC,mBAAmB,EAAE,GAAG,CAAC;;AAEnE;AACA,IAAME,cAAc,GAAG/B,MAAM,CAAC,OAAO,EAAE6B,mBAAmB,EAAE,GAAG,CAAC;;AAEhE;AACA;AACA,IAAMG,iBAAiB,GAAG,CACxB,aAAa,EACbhC,MAAM,CAAC,cAAc,EAAEW,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,EAC3D,mBAAmB,EACnB,iBAAiB,EACjB,qBAAqB,EACrB,UAAU,EACV,QAAQ,EACR,eAAe,EACf,UAAU,EACV,cAAc,EACd,eAAe,EACf,UAAU,EACV,eAAe,EACf,WAAW,EACX,MAAM,EACN,SAAS,EACT,mBAAmB,EACnB,WAAW,EACX,WAAW,EACXX,MAAM,CAAC,QAAQ,EAAE8B,UAAU,EAAE,IAAI,CAAC,EAClC,MAAM,EACN,aAAa,EACb,iBAAiB,EACjB,gCAAgC,EAChC,UAAU,EACV,mBAAmB,EACnB,SAAS,EACT,kBAAkB,CACnB;;AAED;AACA,IAAMG,oBAAoB,GAAG,CAC3B,KAAK,EACL,yBAAyB,EACzB,OAAO,EACP,2BAA2B,EAC3B,aAAa,EACb,iCAAiC,EACjC,SAAS,EACT,6BAA6B,EAC7B,MAAM,EACN,0BAA0B,EAC1B,OAAO,CACR;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAASC,KAAKA,CAACC,IAAI,EAAE;EACnB,IAAMC,UAAU,GAAG;IACjBC,KAAK,EAAE,KAAK;IACZC,SAAS,EAAE;EACb,CAAC;EACD;EACA,IAAMC,aAAa,GAAGJ,IAAI,CAACK,OAAO,CAChC,MAAM,EACN,MAAM,EACN;IACEC,QAAQ,EAAE,CAAE,MAAM;EACpB,CAAC,CACF;EACD,IAAMC,QAAQ,GAAG,CACfP,IAAI,CAACQ,mBAAmB,EACxBJ,aAAa,CACd;;EAED;EACA;EACA,IAAMK,WAAW,GAAG;IAClBC,SAAS,EAAE,SAAS;IACpBC,KAAK,EAAE9C,MAAM,CAAC,IAAI,EAAED,SAAS,CAACY,MAAM,CAAAoC,KAAA,SAAAC,kBAAA,CAAI/B,WAAW,EAAAjB,MAAA,CAAAgD,kBAAA,CAAK9B,mBAAmB,GAAC,CAAC,CAAC;IAC9E+B,GAAG,EAAEtC,MAAM,CAAAoC,KAAA,SAAAC,kBAAA,CAAI/B,WAAW,EAAAjB,MAAA,CAAAgD,kBAAA,CAAK9B,mBAAmB,GAAC;IACnDgC,YAAY,EAAE;EAChB,CAAC;EACD,IAAMC,aAAa,GAAG;IACpB;IACAd,KAAK,EAAErC,MAAM,CAAC,IAAI,EAAEW,MAAM,CAAAoC,KAAA,SAAI3B,QAAQ,CAAC,CAAC;IACxCkB,SAAS,EAAE;EACb,CAAC;EACD,IAAMc,cAAc,GAAGhC,QAAQ,CAC5BiC,MAAM,CAAC,UAAAC,EAAE;IAAA,OAAI,OAAOA,EAAE,KAAK,QAAQ;EAAA,EAAC,CACpCtD,MAAM,CAAC,CAAE,KAAK,CAAE,CAAC,CAAC,CAAC;EACtB,IAAMuD,cAAc,GAAGnC,QAAQ,CAC5BiC,MAAM,CAAC,UAAAC,EAAE;IAAA,OAAI,OAAOA,EAAE,KAAK,QAAQ;EAAA,EAAC,CAAC;EAAA,CACrCtD,MAAM,CAACmB,YAAY,CAAC,CACpBX,GAAG,CAACM,cAAc,CAAC;EACtB,IAAM0C,OAAO,GAAG;IACdC,QAAQ,EAAE,CACR;MACEZ,SAAS,EAAE,SAAS;MACpBR,KAAK,EAAE1B,MAAM,CAAAoC,KAAA,SAAAC,kBAAA,CAAIO,cAAc,EAAAvD,MAAA,CAAAgD,kBAAA,CAAK9B,mBAAmB;IACzD,CAAC;EAEL,CAAC;EACD;EACA,IAAMwC,QAAQ,GAAG;IACfC,QAAQ,EAAEhD,MAAM,CACd,OAAO;IAAE;IACT,MAAM,CAAC;IAAA,CACR;;IACDI,OAAO,EAAEqC,cAAc,CACpBpD,MAAM,CAACuB,kBAAkB,CAAC;IAC7BqC,OAAO,EAAEvC;EACX,CAAC;EACD,IAAMwC,aAAa,GAAG,CACpBjB,WAAW,EACXO,aAAa,EACbK,OAAO,CACR;;EAED;EACA,IAAMM,cAAc,GAAG;IACrB;IACAzB,KAAK,EAAErC,MAAM,CAAC,IAAI,EAAEW,MAAM,CAAAoC,KAAA,SAAIvB,QAAQ,CAAC,CAAC;IACxCc,SAAS,EAAE;EACb,CAAC;EACD,IAAMyB,QAAQ,GAAG;IACflB,SAAS,EAAE,UAAU;IACrBR,KAAK,EAAErC,MAAM,CAAC,IAAI,EAAEW,MAAM,CAAAoC,KAAA,SAAIvB,QAAQ,CAAC,EAAE,QAAQ;EACnD,CAAC;EACD,IAAMwC,SAAS,GAAG,CAChBF,cAAc,EACdC,QAAQ,CACT;;EAED;EACA,IAAME,cAAc,GAAG;IACrB;IACA5B,KAAK,EAAE,IAAI;IACXC,SAAS,EAAE;EACb,CAAC;EACD,IAAM4B,QAAQ,GAAG;IACfrB,SAAS,EAAE,UAAU;IACrBP,SAAS,EAAE,CAAC;IACZmB,QAAQ,EAAE,CACR;MACEpB,KAAK,EAAEV;IACT,CAAC,EACD;MACE;MACA;MACA;MACAU,KAAK,aAAArC,MAAA,CAAa0B,iBAAiB;IACrC,CAAC;EAEL,CAAC;EACD,IAAMyC,SAAS,GAAG,CAChBF,cAAc,EACdC,QAAQ,CACT;;EAED;EACA;EACA,IAAME,aAAa,GAAG,YAAY;EAClC,IAAMC,SAAS,GAAG,kBAAkB;EACpC,IAAMC,MAAM,GAAG;IACbzB,SAAS,EAAE,QAAQ;IACnBP,SAAS,EAAE,CAAC;IACZmB,QAAQ,EAAE;IACR;IACA;MACEpB,KAAK,EAAE,OAAArC,MAAA,CAAOoE,aAAa,YAAApE,MAAA,CAASoE,aAAa,yBAAApE,MAAA,CAAsBoE,aAAa;IACtF,CAAC;IACD;IACA;MACE/B,KAAK,EAAE,SAAArC,MAAA,CAASqE,SAAS,YAAArE,MAAA,CAASqE,SAAS,yBAAArE,MAAA,CAAsBoE,aAAa;IAChF,CAAC;IACD;IACA;MACE/B,KAAK,EAAE;IACT,CAAC;IACD;IACA;MACEA,KAAK,EAAE;IACT,CAAC;EAEL,CAAC;;EAED;EACA,IAAMkC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA;IAAA,IAAIC,YAAY,GAAAtE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAuE,SAAA,GAAAvE,SAAA,MAAG,EAAE;IAAA,OAAM;MAChD2C,SAAS,EAAE,OAAO;MAClBY,QAAQ,EAAE,CACR;QACEpB,KAAK,EAAErC,MAAM,CAAC,IAAI,EAAEwE,YAAY,EAAE,YAAY;MAChD,CAAC,EACD;QACEnC,KAAK,EAAErC,MAAM,CAAC,IAAI,EAAEwE,YAAY,EAAE,uBAAuB;MAC3D,CAAC;IAEL,CAAC;EAAA,CAAC;EACF,IAAME,eAAe,GAAG,SAAlBA,eAAeA,CAAA;IAAA,IAAIF,YAAY,GAAAtE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAuE,SAAA,GAAAvE,SAAA,MAAG,EAAE;IAAA,OAAM;MAC9C2C,SAAS,EAAE,OAAO;MAClBR,KAAK,EAAErC,MAAM,CAAC,IAAI,EAAEwE,YAAY,EAAE,uBAAuB;IAC3D,CAAC;EAAA,CAAC;EACF,IAAMG,aAAa,GAAG,SAAhBA,aAAaA,CAAA;IAAA,IAAIH,YAAY,GAAAtE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAuE,SAAA,GAAAvE,SAAA,MAAG,EAAE;IAAA,OAAM;MAC5C2C,SAAS,EAAE,OAAO;MAClB+B,KAAK,EAAE,UAAU;MACjB9B,KAAK,EAAE9C,MAAM,CAAC,IAAI,EAAEwE,YAAY,EAAE,IAAI,CAAC;MACvCvB,GAAG,EAAE;IACP,CAAC;EAAA,CAAC;EACF,IAAM4B,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA;IAAA,IAAIL,YAAY,GAAAtE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAuE,SAAA,GAAAvE,SAAA,MAAG,EAAE;IAAA,OAAM;MAC/C4C,KAAK,EAAE9C,MAAM,CAACwE,YAAY,EAAE,KAAK,CAAC;MAClCvB,GAAG,EAAEjD,MAAM,CAAC,KAAK,EAAEwE,YAAY,CAAC;MAChC/B,QAAQ,EAAE,CACR8B,iBAAiB,CAACC,YAAY,CAAC,EAC/BE,eAAe,CAACF,YAAY,CAAC,EAC7BG,aAAa,CAACH,YAAY,CAAC;IAE/B,CAAC;EAAA,CAAC;EACF,IAAMM,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA;IAAA,IAAIN,YAAY,GAAAtE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAuE,SAAA,GAAAvE,SAAA,MAAG,EAAE;IAAA,OAAM;MACjD4C,KAAK,EAAE9C,MAAM,CAACwE,YAAY,EAAE,GAAG,CAAC;MAChCvB,GAAG,EAAEjD,MAAM,CAAC,GAAG,EAAEwE,YAAY,CAAC;MAC9B/B,QAAQ,EAAE,CACR8B,iBAAiB,CAACC,YAAY,CAAC,EAC/BG,aAAa,CAACH,YAAY,CAAC;IAE/B,CAAC;EAAA,CAAC;EACF,IAAMO,MAAM,GAAG;IACblC,SAAS,EAAE,QAAQ;IACnBY,QAAQ,EAAE,CACRoB,gBAAgB,EAAE,EAClBA,gBAAgB,CAAC,GAAG,CAAC,EACrBA,gBAAgB,CAAC,IAAI,CAAC,EACtBA,gBAAgB,CAAC,KAAK,CAAC,EACvBC,kBAAkB,EAAE,EACpBA,kBAAkB,CAAC,GAAG,CAAC,EACvBA,kBAAkB,CAAC,IAAI,CAAC,EACxBA,kBAAkB,CAAC,KAAK,CAAC;EAE7B,CAAC;;EAED;EACA,IAAME,iBAAiB,GAAG;IACxB3C,KAAK,EAAErC,MAAM,CAAC,GAAG,EAAE8B,UAAU,EAAE,GAAG;EACpC,CAAC;EACD,IAAMmD,kBAAkB,GAAG;IACzBpC,SAAS,EAAE,UAAU;IACrBR,KAAK,EAAE;EACT,CAAC;EACD,IAAM6C,2BAA2B,GAAG;IAClCrC,SAAS,EAAE,UAAU;IACrBR,KAAK,QAAArC,MAAA,CAAQ6B,mBAAmB;EAClC,CAAC;EACD,IAAMsD,WAAW,GAAG,CAClBH,iBAAiB,EACjBC,kBAAkB,EAClBC,2BAA2B,CAC5B;;EAED;EACA,IAAME,mBAAmB,GAAG;IAC1B/C,KAAK,EAAE,gBAAgB;IACvBQ,SAAS,EAAE,SAAS;IACpBwC,MAAM,EAAE;MACN5C,QAAQ,EAAE,CACR;QACEK,KAAK,EAAE,IAAI;QACXG,GAAG,EAAE,IAAI;QACT7B,QAAQ,EAAEa,oBAAoB;QAC9BQ,QAAQ,KAAAzC,MAAA,CACHmE,SAAS,GACZG,MAAM,EACNS,MAAM;MAEV,CAAC;IAEL;EACF,CAAC;EACD,IAAMO,iBAAiB,GAAG;IACxBzC,SAAS,EAAE,SAAS;IACpBR,KAAK,EAAErC,MAAM,CAAC,GAAG,EAAEW,MAAM,CAAAoC,KAAA,SAAIf,iBAAiB,CAAC;EACjD,CAAC;EACD,IAAMuD,sBAAsB,GAAG;IAC7B1C,SAAS,EAAE,MAAM;IACjBR,KAAK,EAAErC,MAAM,CAAC,GAAG,EAAE8B,UAAU;EAC/B,CAAC;EACD,IAAM0D,UAAU,GAAG,CACjBJ,mBAAmB,EACnBE,iBAAiB,EACjBC,sBAAsB,CACvB;;EAED;EACA,IAAME,IAAI,GAAG;IACXpD,KAAK,EAAEtC,SAAS,CAAC,SAAS,CAAC;IAC3BuC,SAAS,EAAE,CAAC;IACZG,QAAQ,EAAE,CACR;MAAE;MACAI,SAAS,EAAE,MAAM;MACjBR,KAAK,EAAErC,MAAM,CAAC,+DAA+D,EAAE6B,mBAAmB,EAAE,GAAG;IACzG,CAAC,EACD;MAAE;MACAgB,SAAS,EAAE,MAAM;MACjBR,KAAK,EAAEN,cAAc;MACrBO,SAAS,EAAE;IACb,CAAC,EACD;MAAE;MACAD,KAAK,EAAE,OAAO;MACdC,SAAS,EAAE;IACb,CAAC,EACD;MAAE;MACAD,KAAK,EAAE,QAAQ;MACfC,SAAS,EAAE;IACb,CAAC,EACD;MAAE;MACAD,KAAK,EAAErC,MAAM,CAAC,SAAS,EAAED,SAAS,CAACgC,cAAc,CAAC,CAAC;MACnDO,SAAS,EAAE;IACb,CAAC;EAEL,CAAC;EACD,IAAMoD,iBAAiB,GAAG;IACxB5C,KAAK,EAAE,GAAG;IACVG,GAAG,EAAE,GAAG;IACR7B,QAAQ,EAAEsC,QAAQ;IAClBjB,QAAQ,KAAAzC,MAAA,CACH0C,QAAQ,EACRmB,aAAa,EACb2B,UAAU,GACbvB,cAAc,EACdwB,IAAI;EAER,CAAC;EACDA,IAAI,CAAChD,QAAQ,CAACkD,IAAI,CAACD,iBAAiB,CAAC;;EAErC;EACA;EACA,IAAME,kBAAkB,GAAG;IACzBvD,KAAK,EAAErC,MAAM,CAAC8B,UAAU,EAAE,MAAM,CAAC;IACjCV,QAAQ,EAAE,KAAK;IACfkB,SAAS,EAAE;EACb,CAAC;EACD;EACA,IAAMuD,KAAK,GAAG;IACZ/C,KAAK,EAAE,IAAI;IACXG,GAAG,EAAE,IAAI;IACTX,SAAS,EAAE,CAAC;IACZlB,QAAQ,EAAEsC,QAAQ;IAClBjB,QAAQ,GACN,MAAM,EACNmD,kBAAkB,EAAA5F,MAAA,CACf0C,QAAQ,EACRmB,aAAa,EACbG,SAAS,EACTG,SAAS,GACZG,MAAM,EACNS,MAAM,GACHI,WAAW,EACXK,UAAU,GACbC,IAAI;EAER,CAAC;;EAED;EACA;EACA;EACA;EACA,IAAMK,eAAe,GAAG;IACtBC,aAAa,EAAE,MAAM;IACrBtD,QAAQ,EAAE,CACR;MACEI,SAAS,EAAE,OAAO;MAClBR,KAAK,EAAE1B,MAAM,CAACqE,iBAAiB,CAAC3C,KAAK,EAAEP,UAAU,EAAEH,QAAQ,CAAC;MAC5D;MACA;MACAqE,UAAU,EAAE,IAAI;MAChB1D,SAAS,EAAE;IACb,CAAC,EACDF,UAAU;EAEd,CAAC;EACD,IAAM6D,kBAAkB,GAAG;IACzBnD,KAAK,EAAE,GAAG;IACVG,GAAG,EAAE,GAAG;IACRR,QAAQ,KAAAzC,MAAA,CACH0C,QAAQ,GACX+C,IAAI;EAER,CAAC;EACD,IAAMS,uBAAuB,GAAG;IAC9BpD,KAAK,EAAEnC,MAAM,CACXZ,SAAS,CAACC,MAAM,CAAC8B,UAAU,EAAE,MAAM,CAAC,CAAC,EACrC/B,SAAS,CAACC,MAAM,CAAC8B,UAAU,EAAE,KAAK,EAAEA,UAAU,EAAE,MAAM,CAAC,CAAC,CACzD;IACDmB,GAAG,EAAE,GAAG;IACRX,SAAS,EAAE,CAAC;IACZG,QAAQ,EAAE,CACR;MACEI,SAAS,EAAE,SAAS;MACpBR,KAAK,EAAE;IACT,CAAC,EACD;MACEQ,SAAS,EAAE,QAAQ;MACnBR,KAAK,EAAEP;IACT,CAAC;EAEL,CAAC;EACD,IAAMqE,mBAAmB,GAAG;IAC1BrD,KAAK,EAAE,IAAI;IACXG,GAAG,EAAE,IAAI;IACT7B,QAAQ,EAAEsC,QAAQ;IAClBjB,QAAQ,GACNyD,uBAAuB,EAAAlG,MAAA,CACpB0C,QAAQ,EACRmB,aAAa,EACbM,SAAS,GACZG,MAAM,EACNS,MAAM,GACHS,UAAU,GACbC,IAAI,EACJI,KAAK,EACN;IACDG,UAAU,EAAE,IAAI;IAChBI,OAAO,EAAE;EACX,CAAC;EACD,IAAMC,QAAQ,GAAG;IACfxD,SAAS,EAAE,UAAU;IACrBR,KAAK,EAAEtC,SAAS,CAAC,UAAU,CAAC;IAC5B0C,QAAQ,EAAE,CACRqD,eAAe,EACfG,kBAAkB,EAClBE,mBAAmB,EACnB/D,UAAU,CACX;IACDgE,OAAO,EAAE,CACP,IAAI,EACJ,GAAG;EAEP,CAAC;;EAED;EACA;EACA,IAAME,cAAc,GAAG;IACrBzD,SAAS,EAAE,UAAU;IACrBR,KAAK,EAAE,oCAAoC;IAC3CjB,QAAQ,EAAE;MACRL,OAAO,EAAE,4BAA4B;MACrC4C,QAAQ,EAAE;IACZ,CAAC;IACDlB,QAAQ,EAAE,CACRwD,kBAAkB,EAClBE,mBAAmB,EACnB/D,UAAU,CACX;IACDgE,OAAO,EAAE;EACX,CAAC;EACD;EACA,IAAMG,oBAAoB,GAAG;IAC3BR,aAAa,EAAE,UAAU;IACzB9C,GAAG,EAAEd,IAAI,CAACqE,gBAAgB;IAC1B/D,QAAQ,EAAE,CACR;MACEI,SAAS,EAAE,OAAO;MAClBR,KAAK,EAAEV,QAAQ;MACfqE,UAAU,EAAE,IAAI;MAChB1D,SAAS,EAAE;IACb,CAAC;EAEL,CAAC;;EAED;EACA,IAAMmE,eAAe,GAAG;IACtBV,aAAa,EAAE,iBAAiB;IAChC9C,GAAG,EAAEd,IAAI,CAACqE,gBAAgB;IAC1B/D,QAAQ,EAAE,CACR;MACEI,SAAS,EAAE,OAAO;MAClBR,KAAK,EAAEN,cAAc;MACrBO,SAAS,EAAE;IACb,CAAC,EACD;MACEQ,KAAK,EAAE,GAAG;MACVG,GAAG,EAAE,GAAG;MACRX,SAAS,EAAE,CAAC;MACZ0D,UAAU,EAAE,IAAI;MAChB5E,QAAQ,KAAApB,MAAA,CACHsB,uBAAuB,EACvBD,QAAQ,CACZ;MACDoB,QAAQ,EAAE,CAAEgD,IAAI;IAClB,CAAC;EAEL,CAAC;;EAED;EAAA,IAAAiB,SAAA,GAAAC,0BAAA,CACsB5B,MAAM,CAACtB,QAAQ;IAAAmD,KAAA;EAAA;IAArC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAuC;MAAA,IAA5BC,OAAO,GAAAJ,KAAA,CAAAK,KAAA;MAChB,IAAMC,aAAa,GAAGF,OAAO,CAACvE,QAAQ,CAAC0E,IAAI,CAAC,UAAAC,IAAI;QAAA,OAAIA,IAAI,CAACxC,KAAK,KAAK,UAAU;MAAA,EAAC;MAC9E;MACAsC,aAAa,CAAC9F,QAAQ,GAAGsC,QAAQ;MACjC,IAAM2D,QAAQ,MAAArH,MAAA,CACT6D,aAAa,EACbG,SAAS,EACTG,SAAS,GACZG,MAAM,EACNS,MAAM,GACHI,WAAW,CACf;MACD+B,aAAa,CAACzE,QAAQ,MAAAzC,MAAA,CAAAgD,kBAAA,CACjBqE,QAAQ,IACX;QACEvE,KAAK,EAAE,IAAI;QACXG,GAAG,EAAE,IAAI;QACTR,QAAQ,GACN,MAAM,EAAAzC,MAAA,CAAAgD,kBAAA,CACHqE,QAAQ;MAEf,CAAC,EACF;IACH;EAAC,SAAAC,GAAA;IAAAZ,SAAA,CAAAa,CAAA,CAAAD,GAAA;EAAA;IAAAZ,SAAA,CAAAc,CAAA;EAAA;EAED,OAAO;IACLC,IAAI,EAAE,OAAO;IACbrG,QAAQ,EAAEsC,QAAQ;IAClBjB,QAAQ,KAAAzC,MAAA,CACH0C,QAAQ,GACX2D,QAAQ,EACRC,cAAc,EACd;MACEzD,SAAS,EAAE,OAAO;MAClBkD,aAAa,EAAE,sCAAsC;MACrD9C,GAAG,EAAE,KAAK;MACVyE,UAAU,EAAE,IAAI;MAChBtG,QAAQ,EAAEsC,QAAQ;MAClBjB,QAAQ,GACNN,IAAI,CAACwF,OAAO,CAACxF,IAAI,CAACyF,UAAU,EAAE;QAC5B9E,KAAK,EAAE;MACT,CAAC,CAAC,EAAA9C,MAAA,CACC6D,aAAa;IAEpB,CAAC,EACD0C,oBAAoB,EACpBE,eAAe,EACf;MACEV,aAAa,EAAE,QAAQ;MACvB9C,GAAG,EAAE,GAAG;MACRR,QAAQ,KAAAzC,MAAA,CAAO0C,QAAQ,CAAE;MACzBJ,SAAS,EAAE;IACb,CAAC,GACEuB,aAAa,EACbG,SAAS,EACTG,SAAS,GACZG,MAAM,EACNS,MAAM,GACHI,WAAW,EACXK,UAAU,GACbC,IAAI,EACJI,KAAK;EAET,CAAC;AACH;AAEAgC,MAAM,CAACC,OAAO,GAAG5F,KAAK"},"metadata":{},"sourceType":"script"}